<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<title>History of yabasic</title>
<link rel="stylesheet" type="text/css" href="standard.css" tppabs="http://www.yabasic.de/standard.css">
<meta name="author" content="Marc-Oliver Ihm">
<meta name="description" content="Yabasic, Basic for Unix and Windows">
<meta name="keywords" content="Yabasic basic free unix windows">
<meta name="generator" content="Namo WebEditor v3.0">

<script language="JavaScript"><!--
if (top == self) window.location.href='default.htm'/*tpa=http://www.yabasic.de/default.htm*/;
//--></script>

</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

<h1>History of yabasic</h1>
<p>Early in 1995 I came across the book &quot;Compilerbau&quot; (ISBN 3-519-32338-9) 
by Niklaus Wirth. Reading this great book left me with the impression, that 
writing a compiler or interpreter would be a breeze ;-). So I started to write 
my own interpreter; and as basic was the only interpreted language I had experience 
with, I started to write a basic interpreter.</p>
<p>A <b>first version</b> of yabasic was completed around <b>May 1995</b>, still 
missing many features (no arrays, no loops, just goto); nevertheless I released 
it as <b>version 1.0</b>. Having released yabasic to the public, yabasic users 
sent me bug reports and feature requests, which drove the further developement.</p>
<p>The next major improvement came in <b>summer 1996</b>, when I got my Windows95-machine: 
Porting yabasic to the <b>Win32</b>-platform took two weeks and writing an installation 
program took a month. This was <b>version 2.0</b> .</p>
<p>Having ported yabasic to Windows the stream of bug reports and feature requests 
began to swell. After two and a half years it had reached a level I could not 
handle in a resonable manner. And I decided to share the work. As the code of 
yabasic is somewhat obfuscated, I could not expect anyone to fix the numerous 
bugs in yabasic. Therefore I choose to let the users care about the new features. 
And as the users of yabasic mostly liked to program in yabasic, the new features 
had to be added using yabasic (not C). Therefore I added <b>subroutines</b> 
and <b>libraries</b> to yabasic in <b>summer 1999</b>, releasing it as <b>version 
2.57</b> . The idea is, that users may now implement new features as a set of 
subroutines in a separate library and may share them with others. On the long 
term we should end up with a standard library for yabasic, and of course: Any 
help is welcome !</p>
<h2>Flex and Bison</h2>
<p>You may have noticed from the above, that yabasic made quite a rapid start; 
this is mainly due to <strong>flex </strong>and <strong>bison</strong>, the 
prime tools, used to implement yabasic (refer to &quot;lex &amp; yacc&quot; 
by John R. Levine, Tony Mason and Doug Brown, ISBN 1-56592-000-7) .</p>
<p>Bison and flex take the grammar in Backus-Naur-form and produce two C-programs, 
which all by themselves can parse an input program in the new language and verify 
it for grammatical correctness. The only thing left to the programmer is to 
put flesh on this skeleton, so that the parsed and verified input program actually 
does something.</p>
<p>This process is remarkably efficient: 32 kB of flex and bison instructions 
generate 184 kB of C-code, which has to be compared with the 199 kB of C-code 
which I wrote myself. Together these implement the functionality of yabasic. 
So actually half of the code has been generated by flex and bison !</p>
<h2>Execution of a program</h2>
<p>Although yabasic behaves mostly like an interpreter, it is rather a compiler: 
If you give it any basic-code for execution, the code is compiled, yielding 
instructions for a weird and simple stack-machine. These instructions are then 
interpreted immediately, so that you will never get in touch with the stack-machine. 
But you may find out the time needed for the different phases of this process, 
if you invoke yabasic with infolevel set to <strong>note</strong>.</p>
</body>

</html>