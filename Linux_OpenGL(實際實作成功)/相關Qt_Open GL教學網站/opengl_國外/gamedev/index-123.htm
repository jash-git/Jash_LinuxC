<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
    dir="ltr"
    xml:lang="en"
    lang="en">
  <head>
    <title>NeHe Productions: Game Input Class</title>

    <link rel="stylesheet" type="text/css" href="public_base.css" tppabs="http://nehe.gamedev.net/static/css/public_base.css" />
    <link type="text/css" rel="stylesheet" href="shThemeMidnight.css" tppabs="http://nehe.gamedev.net/static/css/syntax_highlighter/shThemeMidnight.css"/>
    
    <link rel="alternate" type="application/atom+xml" title="Atom feed" href="index-1.htm" tppabs="http://nehe.gamedev.net/atom/" />
    <link rel="alternate" type="application/rss+xml" title="RSS feed" href="index-2.htm" tppabs="http://nehe.gamedev.net/rss/" />
    
    <meta name="author" content="Luke Benstead + Carsten Haubold" />
    <meta name="description" content="OpenGL Tutorials, Demos, Games and More..." />
    <meta name="keywords" content="opengl, tutorial, article, demo, game, blend, texturemap, lighting, contest, 3D" />

    
    

    

</script>


    
    
    
    
        
        <script type='text/javascript'>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
        (function() {
        var gads = document.createElement('script');
        gads.async = true;
        gads.type = 'text/javascript';
        var useSSL = 'https:' == document.location.protocol;
        gads.src = (useSSL ? 'https:' : 'http:') + 
        '//www.googletagservices.com/tag/js/gpt.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(gads, node);
        })();
        </script>

        <script type='text/javascript'>
        googletag.cmd.push(function() {
        googletag.defineSlot('/1004699/Leaderboard_NeHe', [728, 90], 'div-gpt-ad-1327940144417-0').addService(googletag.pubads());
        googletag.defineSlot('/1004699/Skyscraper_NeHe', [160, 600], 'div-gpt-ad-1327940144417-1').addService(googletag.pubads());
        googletag.pubads().enableSingleRequest();
        googletag.enableServices();
        });
        </script>
    
    

    
  </head>

  <body>
    
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "all.js#xfbml=1"/*tpa=http://connect.facebook.net/en_GB/all.js#xfbml=1*/;
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>




    <table cellpadding="0" cellspacing="0" border="0" id="layout_table">
    <tr><td>
        <div id="header">
                <a href="index.htm" tppabs="http://nehe.gamedev.net/"><img class="logo" class="logo" src="nehe.png" tppabs="http://nehe.gamedev.net/static/images/nehe.png" border="0" alt="Nehe" /></a>
        </div>            
    </td></tr>
    <tr><td colspan="2">
            
<div class="navbar">
    <a href="index.htm" tppabs="http://nehe.gamedev.net/">HOME</a>
    <a href="javascript:if(confirm('http://twitter.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://twitter.com/#!/nehegl'" tppabs="http://twitter.com/#!/nehegl">TWITTER</a>  
    <a href="javascript:if(confirm('http://www.facebook.com/pages/NeHe/300582493323181  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.facebook.com/pages/NeHe/300582493323181'" tppabs="http://www.facebook.com/pages/NeHe/300582493323181">FACEBOOK</a>     
    <a href="index-2.htm" tppabs="http://nehe.gamedev.net/rss/">RSS</a>    
    <a href="index-1.htm" tppabs="http://nehe.gamedev.net/atom/">ATOM</a>    
    <a href="javascript:if(confirm('http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions'" tppabs="http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions">FORUM</a>    
</div>
    
    </td></tr>
    <tr>
        <td class="col1">

            
<div id="article_container">


<h1 class="article-header">Game Input Class</h1>
<div class="social-media">
<!-- Place this tag where you want the +1 button to render -->
<div class="g-plusone" data-size="medium" data-width="120" data-annotation="inline"></div>
<div class="fb-like" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" data-colorscheme="dark" data-font="arial"></div>
</div>
<div style="clear:both;"></div>
<center>Version 1.01</center><center>Made For The Windows Operating System</center>
<p><strong><span style="text-decoration: underline;">1. About The Class</span></strong> <br /><br /> This class makes it possible to input strings, chars and integers in OpenGL while working with the Windows API. You can use it in MFC too.</p>
<p><strong><span style="text-decoration: underline;">2. How To Use This Class</span></strong> <br /><br /> In order to use this class, you have to have access to it's GetInput function from the Window Procedure (WndProc usually). Therefore, I suggest you define a global variable of the class, or make a GetInput function in the class that contains it that simply calls GetInput from this class. In the WndProc's WM_EVENT call the GetInput function with the WPARAM variable.</p>
<p>An example:</p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">switch (uMsg)					// type of uMsg is UINT
{
	
	case WM_KEYDOWN:
	{
		InputClass.GetInput(wParam);	// type of InputClass  CGLInput
						// type of wParam - WPARAM
		
	}
	
}
</pre>
<p>The end of an input is when user presses the ENTER key (VK_RETURN constant). Because a lot of people use enter in their programs, I suggest you call the FixEnterCollide function every frame.</p>
<p>After you've done that, you can start using the class for input. The class ostensibly works in the background (because it's based on Windows Events), so you can draw or do other things while the user inputs.</p>
<p>The class works by "processes"  it has a process for each input type  integer, string or char. In order to get input, you begin a process (using the BeginProcess function. This function gets the kind of process you want to begin). Now any keys that are pressed will be handled by the input class up until the user presses the ENTER key.</p>
<p>You can use the IsOver function to determine whether the process is over or not. If it is, use the GetInt, GetStr or GetChar function to get the input. Once you use one of these functions, the process is automatically cancelled. In your rendering loop use the DrawInput function so the user can see the input.</p>
<p>Many people use the ENTER key for various things. If you do as well, make sure you call the FixEnterCollide function in the main loop of your program. It will fix the "collides" between the input class and use of Enter in the program itself.</p>
<p><strong><span style="text-decoration: underline;">3. The Function Table For This Class</span></strong> <br /><br /></p>
<table style="width: 75%;" border="1" align="center">
<tbody>
<tr>
<td class="news"><span class="head">Function Name</span></td>
<td class="news"><span class="head">How To Use It</span></td>
</tr>
<tr>
<td class="back2"><span class="text">BeginProcess(GLuint)</span></td>
<td class="back2"><span class="text">Begins an input process. The only parameter is what kind of a process you want to begin. Enter one of the process variables (see the class Process Constants Table)</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetInput(WPARAM)</span></td>
<td class="back2"><span class="text">Call this function with from the WndProc function as explained above.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetStr(char*)</span></td>
<td class="back2"><span class="text">Gets a pointer to char (or name of a char array) and makes it a pointer to the string. It must have enough room for the string. Use GetStrLen to verify it. If the process isn't over, it will return false, else true.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetInt(int&amp;)</span></td>
<td class="back2"><span class="text">Parameter is an int variable (by reference). If the process is over, it will return true and will substitute the data user has entered. If the process isn't over, it returns false.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetInt( )</span></td>
<td class="back2"><span class="text">Returns the integer that the user entered, if process is over.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetChar(char&amp;)</span></td>
<td class="back2"><span class="text">Puts in the char variable the char that the user has entered and returns true if process is over. Otherwise it returns false.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetChar( )</span></td>
<td class="back2"><span class="text">Returns the char that that the user entered if process is over.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetProcess( )</span></td>
<td class="back2"><span class="text">Returns the value of the Process Constant of the current process. Returns PR_NO_PROCESS if there is no process.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">IsOver( )</span></td>
<td class="back2"><span class="text">Returns true if a process is over, otherwise false.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">DrawInput( GLYPHMETRICSFLOAT* ,GLuint)</span></td>
<td class="back2"><span class="text">The function draws the input of the user. 1st Parameter is a pointer to an array that contains the information about the font. 2nd parameter is the base display list for the font. If current process is PR_NO_PROCESS, then nothing will be drawn (no output).</span></td>
</tr>
</tbody>
</table>
<p><strong><span style="text-decoration: underline;">4. Process Constants Table</span></strong> <br /><br /></p>
<table style="width: 75%;" border="1" align="center">
<tbody>
<tr>
<td class="news"><span class="head">Constant's Name</span></td>
<td class="news"><span class="head">Value</span></td>
<td class="news"><span class="head">Meaning</span></td>
</tr>
<tr>
<td class="back2"><span class="text">PR_NO_PROCESS</span></td>
<td class="back2"><span class="text">0</span></td>
<td class="back2"><span class="text">No process. If this is the parameter of BeginProcess function, the current process is stopped.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">PR_GETCHAR</span></td>
<td class="back2"><span class="text">1</span></td>
<td class="back2"><span class="text">Get char process</span></td>
</tr>
<tr>
<td class="back2"><span class="text">PR_GETINTEGER / PR_GETINT</span></td>
<td class="back2"><span class="text">2</span></td>
<td class="back2"><span class="text">Get integer process</span></td>
</tr>
<tr>
<td class="back2"><span class="text">PR_GETSTRING / PR_GETSTR</span></td>
<td class="back2"><span class="text">3</span></td>
<td class="back2"><span class="text">Get string process</span></td>
</tr>
</tbody>
</table>
<p>There is obviously no need knowing the values of the constants.</p>
<p><strong><span style="text-decoration: underline;">5. Example</span></strong></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">#include "CGLInput.h"

CGLInput IC1;					// Define A Global Input Class Variable

LRESULT CALLBACK WndProc(	HWND hWnd,
				UINT uMsg,
				WPARAM wParam,
				LPARAM lParam )
{
	switch (uMsg)
	{
		
		case WM_KEYDOWN:
		{
			InputClass.GetInput(wParam);			
			
		}
		
	}
}

	IC1.BeginProcess(PR_GETINT);		// Begin a Get Int Process

void DrawEverything()				// Constantly Draws The Scene
{
	int input;
	
	IC1.DrawInput();			// Draw The Input. If Process Is
						// PR_NO_PROCESS, Nothing
						// Is Drawn.
	
	if(IC1.IsOver())			// Is The Process Over?
	{
		IC1.GetInt(input);		// If So, Put The Input In A Variable
	}
	
}
</pre>
<center><span style="font-size: x-small;"><span style="text-decoration: underline;">CGLOutput  OpenGL Output Class</span></span></center>
<p>&nbsp;</p>
<center><span style="font-size: xx-small;">By: Aviram Cohen</span></center>
<p>&nbsp;</p>
<center>Version 1.00</center><center>Made For The Windows Operating System</center>
<p><strong><span style="text-decoration: underline;">1. About The Class</span></strong> <br /><br /> This class makes it possible to create a font and display all kinds of text in OpenGL. Unlike the class CGLInput, this class can work great under MFC (but if you use it, you have to go to the settings of the project in VC++ 6.0 and choose not to use precompiled headers for the files of this class). The functions of the class are based on the ones that appear on this site (http://nehe.gamedev.net).</p>
<p><strong><span style="text-decoration: underline;">2. How To Use The Class</span></strong> <br /><br /> First of all, you have to define (of course) a variable. Then use the SetFont function to set the font's definitions. Once you have called the SetFont function, you can use the Print function exactly the same way you would use printf (standard I/O in the C Language). You can use SetFont more than once in order to change the font's properties.</p>
<p><strong><span style="text-decoration: underline;">3. The Functions Of This Class</span></strong> <br /><br /> SetFont:</p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">void SetFont(	HDC hDC,
		char* fName = NULL,
		GLfloat fDepth = 0.5f,
		int fWeight = FW_BOLD,
		DWORD fItalic = FALSE,
		DWORD fUnderline = FALSE,
		DWORD fStrikeOut = FALSE,
		DWORD fCharSet = ANSI_CHARSET  )
</pre>
<p>Parameters: <br /><br /> <em>hDC</em><br />Handle of GDI Device Context <br /><br /> <em>fName</em><br />Font name as defined in Windows, for example "Arial" or "Times New Roman". <br /><br /> <em>fDepth</em><br />How "deep" the font goes, meaning how long it gets on the Z Axis. <br /><br /> <em>fWeight</em><br />Weight of the font. There is a list of values that will fit. <br /><br /> <em>fItalic</em><br />For italic font TRUE, otherwise FALSE. <br /><br /> <em>fUnderline</em><br />For underlined font TRUE, otherwise FALSE. <br /><br /> <em>fStrilkeOut</em><br />For strikeout font TRUE, otherwise FALSE. <br /><br /> <em>fCharSet</em><br />The character set. For a specific language, it is the name of language in capital letters, then CHARSET. For example, GREEK_CHARSET or HEBREW_CHARSET. It can write in english, so if you don't use another language, just leave it or enter ANSI_CHARSET, which is default.</p>
<p><strong>Print:</strong></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">bool Print(const char *fmt, ...)
</pre>
<p>Parameters: <br /><br /> A string and afterwards the variables that you want to print, in the same template as the printf function uses.</p>
<p>Return Values: <br /><br /> If the font isn't set or if the entered string is NULL, the function will return true. Otherwise it will return false.</p>
<p><strong><span style="text-decoration: underline;">4. Class Constants</span></strong> <br /><br /> The class has only one constant - GLO_DEFAULT_FONT[ ] of char. It contains the name of the default font (that is used in case no font name is given or NULL was entered for the fName parameter of SetFont.</p>
<p><strong><span style="text-decoration: underline;">5. Font Weights</span></strong> <br /><br /> This table of font weights appears in MSDN:</p>
<table style="width: 75%;" border="1" align="center">
<tbody>
<tr>
<td class="news"><span class="head">Value</span></td>
<td class="news"><span class="head">Weight</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_DONTCARE</span></td>
<td class="back2"><span class="text">0</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_THIN</span></td>
<td class="back2"><span class="text">100</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_EXTRALIGHT</span></td>
<td class="back2"><span class="text">200</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_ULTRALIGHT</span></td>
<td class="back2"><span class="text">200</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_LIGHT</span></td>
<td class="back2"><span class="text">300</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_NORMAL</span></td>
<td class="back2"><span class="text">400</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_REGULAR</span></td>
<td class="back2"><span class="text">400</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_MEDIUM</span></td>
<td class="back2"><span class="text">500</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_SEMIBOLD</span></td>
<td class="back2"><span class="text">600</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_DEMIBOLD</span></td>
<td class="back2"><span class="text">600</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_BOLD</span></td>
<td class="back2"><span class="text">700</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_EXTRABOLD</span></td>
<td class="back2"><span class="text">800</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_ULTRABOLD</span></td>
<td class="back2"><span class="text">800</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_HEAVY</span></td>
<td class="back2"><span class="text">900</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_BLACK</span></td>
<td class="back2"><span class="text">900</span></td>
</tr>
</tbody>
</table>
<p><strong><span style="text-decoration: underline;">6. Example</span></strong></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">#include "CGLOutput.h"

char myname[];

CGLOutput OC;					// Output Class Variable

OC.SetFont(hDC, "Comic Sans MS");		// Set The Font
OC.Print("Hello %s", myname);			// Print "hello" + a string.

</pre>
<center><span style="font-size: x-small;"><span style="text-decoration: underline;">CGLIO  OpenGL Input/Output Class</span></span></center>
<p>&nbsp;</p>
<center><span style="font-size: xx-small;">By: Aviram Cohen</span></center>
<p>&nbsp;</p>
<p><strong><span style="text-decoration: underline;">1. About The Class</span></strong> <br /><br /> The class brings the Input and Output classes together.</p>
<!-- break -->
<p><strong><span style="text-decoration: underline;">2. How To Use This Class</span></strong> <br /><br /> All you need to know is how to use the overridden function DrawInput. Simply use the two class functions for everything within this class except the DrawInput function.</p>
<p>Use the SetFont function to set the font's definitions, and then call the DrawInput function with no parameters. The input will be drawn automatically.</p>
<p><strong>Download the code for this article:</strong> <a href="javascript:if(confirm('http://nehe.gamedev.net/_admin/article/edit/16014/extras/article18/opengl_io.zip  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a path excluded by the site\'s Robot Exclusion parameters.  (Teleport Pro\'s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?'))window.location='http://nehe.gamedev.net/_admin/article/edit/16014/extras/article18/opengl_io.zip'" tppabs="http://nehe.gamedev.net/_admin/article/edit/16014/extras/article18/opengl_io.zip">OpenGL IO</a></p>


</div>
</div>



            <div style="width:728px;padding:0px;margin:auto; margin-top: 10px;">
            

    
                <!-- Leaderboard_NeHe -->
                <div id='div-gpt-ad-1327940144417-0' style='width:728px; height:90px;'>
                <script type='text/javascript'>
                googletag.cmd.push(function() { googletag.display('div-gpt-ad-1327940144417-0'); });
                </script>
                </div>
            

                           
            </div>   
        </td>
        <td class="col2">
            




<div style="text-align: center; padding:10px;">

<script type='text/javascript'>
    GA_googleFillSlot("Skyscraper_NeHe");
</script>

</div>
            
        </td>
    </table>
    <div id="footer">
        <p>
            
    
    © 1997-2012 Gamedev . All rights reserved.<br/>

			NeHe™ and NeHe Productions™ are trademarks of GameDev.net, LLC<br/>
			OpenGL® is a registered trademark of Silicon Graphics Inc.<br/>
		</p>        
		<br/>
    </div>

    
    
	    <script type="text/javascript" src="shCore.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shCore.js"></script>
        <script type="text/javascript" src="shBrushCpp.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shBrushCpp.js"></script>
	    <script type="text/javascript" src="shBrushJScript.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shBrushJScript.js"></script>
	    <script type="text/javascript">SyntaxHighlighter.all();</script>
    

    <!-- Place this render call where appropriate -->
    <script type="text/javascript">
      (function() {
        var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
        po.src = 'plusone.js'/*tpa=https://apis.google.com/js/plusone.js*/;
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
      })();
    </script>    

    
<!-- GoogleAnalytics code -->
<script src="urchin.js" tppabs="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-279474-2"; // Gamedev
urchinTracker();
_uff = 0; // Reset for second account
_uacct = "UA-24180731-1"; // Non-GD
urchinTracker();
</script> 
  </body>
</html>
