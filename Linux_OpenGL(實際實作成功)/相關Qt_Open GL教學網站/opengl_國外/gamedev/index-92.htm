<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
    dir="ltr"
    xml:lang="en"
    lang="en">
  <head>
    <title>NeHe Productions: Binary Space Partitioning Tree</title>

    <link rel="stylesheet" type="text/css" href="public_base.css" tppabs="http://nehe.gamedev.net/static/css/public_base.css" />
    <link type="text/css" rel="stylesheet" href="shThemeMidnight.css" tppabs="http://nehe.gamedev.net/static/css/syntax_highlighter/shThemeMidnight.css"/>
    
    <link rel="alternate" type="application/atom+xml" title="Atom feed" href="index-1.htm" tppabs="http://nehe.gamedev.net/atom/" />
    <link rel="alternate" type="application/rss+xml" title="RSS feed" href="index-2.htm" tppabs="http://nehe.gamedev.net/rss/" />
    
    <meta name="author" content="Luke Benstead + Carsten Haubold" />
    <meta name="description" content="OpenGL Tutorials, Demos, Games and More..." />
    <meta name="keywords" content="opengl, tutorial, article, demo, game, blend, texturemap, lighting, contest, 3D" />

    
    

    

</script>


    
    
    
    
        
        <script type='text/javascript'>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
        (function() {
        var gads = document.createElement('script');
        gads.async = true;
        gads.type = 'text/javascript';
        var useSSL = 'https:' == document.location.protocol;
        gads.src = (useSSL ? 'https:' : 'http:') + 
        '//www.googletagservices.com/tag/js/gpt.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(gads, node);
        })();
        </script>

        <script type='text/javascript'>
        googletag.cmd.push(function() {
        googletag.defineSlot('/1004699/Leaderboard_NeHe', [728, 90], 'div-gpt-ad-1327940144417-0').addService(googletag.pubads());
        googletag.defineSlot('/1004699/Skyscraper_NeHe', [160, 600], 'div-gpt-ad-1327940144417-1').addService(googletag.pubads());
        googletag.pubads().enableSingleRequest();
        googletag.enableServices();
        });
        </script>
    
    

    
  </head>

  <body>
    
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "all.js#xfbml=1"/*tpa=http://connect.facebook.net/en_GB/all.js#xfbml=1*/;
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>




    <table cellpadding="0" cellspacing="0" border="0" id="layout_table">
    <tr><td>
        <div id="header">
                <a href="index.htm" tppabs="http://nehe.gamedev.net/"><img class="logo" class="logo" src="nehe.png" tppabs="http://nehe.gamedev.net/static/images/nehe.png" border="0" alt="Nehe" /></a>
        </div>            
    </td></tr>
    <tr><td colspan="2">
            
<div class="navbar">
    <a href="index.htm" tppabs="http://nehe.gamedev.net/">HOME</a>
    <a href="javascript:if(confirm('http://twitter.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://twitter.com/#!/nehegl'" tppabs="http://twitter.com/#!/nehegl">TWITTER</a>  
    <a href="javascript:if(confirm('http://www.facebook.com/pages/NeHe/300582493323181  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.facebook.com/pages/NeHe/300582493323181'" tppabs="http://www.facebook.com/pages/NeHe/300582493323181">FACEBOOK</a>     
    <a href="index-2.htm" tppabs="http://nehe.gamedev.net/rss/">RSS</a>    
    <a href="index-1.htm" tppabs="http://nehe.gamedev.net/atom/">ATOM</a>    
    <a href="javascript:if(confirm('http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions'" tppabs="http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions">FORUM</a>    
</div>
    
    </td></tr>
    <tr>
        <td class="col1">

            
<div id="article_container">


<h1 class="article-header">Binary Space Partitioning Tree</h1>
<div class="social-media">
<!-- Place this tag where you want the +1 button to render -->
<div class="g-plusone" data-size="medium" data-width="120" data-annotation="inline"></div>
<div class="fb-like" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" data-colorscheme="dark" data-font="arial"></div>
</div>
<div style="clear:both;"></div>
<p><strong style="text-decoration: underline;"><span style="text-decoration: underline;">Binary Space Partitioning Tree</span></strong></p>
<p>A Binary Space Partitioning Tree (BSP Tree) is a very complex, and very effective method to render indoor environments/scenes in a 3d game. It is used to create effective Depth Testing. Depth Testing is a method that determines which objects in a scene are furthest from the camera. After which, it will draw the polygons in the order of furthest to closest, so that you see everything correctly.</p>
<!-- break --><center><img src="1-1.jpg" tppabs="http://nehe.gamedev.net/_admin/article/edit/18008/extras/article04/1.jpg" alt="" border="0" /></center>
<p>Consider this drawing. As you can see, the white polygon covers the yellow polygon in <strong>Removal B</strong>, and the yellow polygon covers the white polygon in <strong>Removal A</strong>. Without Depth Testing, we may see the yellow polygon on top of the white polygon at <strong>Removal A</strong> and <strong>Removal B</strong>, despite the fact that at <strong>Removal B</strong> the yellow polygon is behind the white one. Obviously Depth Testing is a requirement.</p>
<p>OpenGL, the 3d library I use to render polygons, does provide Depth Testing automatically, but it is slow, and a slow program is a bad program. That is why we use a BSP Tree. A BSP Tree sorts the polygons into a tree of nodes quickly and efficiently at loadup, so then we can easily know which polygons are furthest from the camera at run-time.</p>
<center><img src="2-1.jpg" tppabs="http://nehe.gamedev.net/_admin/article/edit/18008/extras/article04/2.jpg" alt="" border="0" /></center>
<p>In this scene, the yellow letters represent walls, the pink lines represent the position of the camera, and the dotted lines represent the camera's view area.</p>
<p>This scene is obviously going to need Depth Testing. Without it, <strong>A</strong> and <strong>E</strong> could end up covering <strong>D</strong>, <strong>B</strong>, and/or <strong>E</strong>, which is not acceptable. We are going to need to make a BSP Tree. The BSP Tree will accomplish the following tasks when being built:</p>
<p>1) Choose a polygon from the polygons passed to the function<br /> 2) Turn that polygon into a plane<br /> 3) Classify all of the polygons passed to the function as <strong>In Front Of</strong>, <strong>Behind</strong>, <strong>Coincident With</strong>, or <strong>Spanning</strong> the plane<br /> 4) Split any polygons that <strong>Span</strong> the plane<br /> 5) If there are any polygons <strong>In Front Of</strong> the plane, go to step one passing those front polygons<br /> 6) If there are any polygons <strong>Behind</strong> the plane, go to step one passing those polygons<br /> 7) Add any <strong>Coincident</strong> polygons to the current node's list</p>
<p>This may be hard to grasp at first, so let's go through each step. Notice that this function is passed a list of polygons. When you want to build the polygon, you pass all of the polygons to this function.</p>
<p>In step one, we choose a polygon (either based on an algorithm or randomly) to act as a partition.</p>
<center><img src="3-1.jpg" tppabs="http://nehe.gamedev.net/_admin/article/edit/18008/extras/article04/3.jpg" alt="" border="0" /></center>
<p>In this example, we choose polygon <strong>B</strong>. In step two, we turn that polygon into a plane. Notice that a plane extends in 2 directions infinitely.</p>
<center><img src="4-1.jpg" tppabs="http://nehe.gamedev.net/_admin/article/edit/18008/extras/article04/4.jpg" alt="" border="0" /></center>
<p>Now we have a plane <strong>B</strong>. Now, in step 3, we must classify all of the polygons. In the following illustration, a yellow polygon is <strong><span style="text-decoration: underline;">Behind</span></strong>, a purple polygon <strong><span style="text-decoration: underline;">In Front Of</span></strong>, an green polygon is <strong><span style="text-decoration: underline;">Spanning</span></strong>, and a blue polygon is <strong><span style="text-decoration: underline;">Coincident</span></strong> to the plane.</p>
<center><img src="5.jpg" tppabs="http://nehe.gamedev.net/_admin/article/edit/18008/extras/article04/5.jpg" alt="" border="0" /></center>
<p>We classify each polygon by going through each point and use the Planar Equation to get the distance from the plane. Then, based on the distances, we classify the polygon.</p>
<p>Step 4 requires us to <strong><span style="text-decoration: underline;">Split</span></strong> any spanning polygons. Once we have finished splitting, we should look like the following:</p>
<center><img src="6.jpg" tppabs="http://nehe.gamedev.net/_admin/article/edit/18008/extras/article04/6.jpg" alt="" border="0" /></center>
<p>Almost there, just a few more steps. Steps 5 and 6 require us to go to step one passing the polygons <strong><span style="text-decoration: underline;">In Front Of</span></strong> and <span style="text-decoration: underline;"><strong>Behind</strong></span> our plane. This technique (calling a function inside of itself) is called recursion. Naturally, we only execute steps 5 and 6 if there are polygons <strong><span style="text-decoration: underline;">In Front Of</span></strong> or <strong><span style="text-decoration: underline;">Behind</span></strong> our partition. If we always executed those steps, we would never quit building nodes. The final step adds any coincident polygons to its (the current node's) personal polygon list.</p>
<p>Congratulations, we have just made our first split. Right now our tree looks like the following:</p>
<pre><strong> Node 1 (Partition B): B | Back: Cb, A, Fb---------Front: Ca, G, D, E, Fa </strong></pre>
<p>Good, but we need more splitting. Let's get another partition in our front polygons.</p>
<center><img src="7.jpg" tppabs="http://nehe.gamedev.net/_admin/article/edit/18008/extras/article04/7.jpg" alt="" border="0" /></center>
<p>This time we are going to use <strong>D</strong> as our partition. After classifying and splitting we have the following:</p>
<center><img src="8.jpg" tppabs="http://nehe.gamedev.net/_admin/article/edit/18008/extras/article04/8.jpg" alt="" border="0" /></center>
<p>With that, our BSP Tree now looks like this:</p>
<pre><strong> Node 1 (Partition B): B | Back: Cb, A, Fb---------Front (Partition D): D | Back: Ca,Gb---Front: Ga,E,Fa </strong></pre>
<p>We would continue to partition our level until our list looked like the following:</p>
<pre><strong> Node 1: B | Back: A----------------Front: D | | Front: Cb Back: Ca--------Front: E | | | Front: Fb Front: Gb Back: Gaa---Front: Gab | Front: Fa </strong></pre>
<p>All partitioned! We have a total of 11 nodes, each branching off of a parent node.</p>
<p>Now this is all amazing, but what good is this? I mean, really, this doesn't do much beside split a few polygons. Well, all that is for when we render at run-time.</p>
<center><img src="9.jpg" tppabs="http://nehe.gamedev.net/_admin/article/edit/18008/extras/article04/9.jpg" alt="" border="0" /></center>
<p>When we are rendering, we compare position <strong>Camera</strong> to each and every plane, and draw our nodes in order based on the distances. We start with our base node, B, and will execute the following steps:</p>
<pre>1) Find the distance of position Camera from our plane&lt;br&gt;
2) If the distance is greater than 0:
   a.  Go to step one with our Back node
   b.  Draw our node's polygons
   c.  Go to step one with our Front node
3) If step 2 is false:
   a.  Go to step one with our Front node
   b.  Draw our node's polygons
   c.  Go to step one with our Back node
</pre>
<p>And that is it! So based on where position Camera is, we would be drawing the nodes in the following order:</p>
<p><strong>Node A, Node Cb, Node Fb, Base Node, Node Fa, Node Gab, Node Gaa, Node E, Node Gb, Node Ca, Node D</strong></p>
<p><a href="mailto:frazee@swbell.net">Paul Frazee (The Rainmaker)</a></p>


</div>
</div>



            <div style="width:728px;padding:0px;margin:auto; margin-top: 10px;">
            

    
                <!-- Leaderboard_NeHe -->
                <div id='div-gpt-ad-1327940144417-0' style='width:728px; height:90px;'>
                <script type='text/javascript'>
                googletag.cmd.push(function() { googletag.display('div-gpt-ad-1327940144417-0'); });
                </script>
                </div>
            

                           
            </div>   
        </td>
        <td class="col2">
            




<div style="text-align: center; padding:10px;">

<script type='text/javascript'>
    GA_googleFillSlot("Skyscraper_NeHe");
</script>

</div>
            
        </td>
    </table>
    <div id="footer">
        <p>
            
    
    © 1997-2012 Gamedev . All rights reserved.<br/>

			NeHe™ and NeHe Productions™ are trademarks of GameDev.net, LLC<br/>
			OpenGL® is a registered trademark of Silicon Graphics Inc.<br/>
		</p>        
		<br/>
    </div>

    
    
	    <script type="text/javascript" src="shCore.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shCore.js"></script>
        <script type="text/javascript" src="shBrushCpp.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shBrushCpp.js"></script>
	    <script type="text/javascript" src="shBrushJScript.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shBrushJScript.js"></script>
	    <script type="text/javascript">SyntaxHighlighter.all();</script>
    

    <!-- Place this render call where appropriate -->
    <script type="text/javascript">
      (function() {
        var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
        po.src = 'plusone.js'/*tpa=https://apis.google.com/js/plusone.js*/;
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
      })();
    </script>    

    
<!-- GoogleAnalytics code -->
<script src="urchin.js" tppabs="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-279474-2"; // Gamedev
urchinTracker();
_uff = 0; // Reset for second account
_uacct = "UA-24180731-1"; // Non-GD
urchinTracker();
</script> 
  </body>
</html>
