<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
    dir="ltr"
    xml:lang="en"
    lang="en">
  <head>
    <title>NeHe Productions: Billboarding How To</title>

    <link rel="stylesheet" type="text/css" href="public_base.css" tppabs="http://nehe.gamedev.net/static/css/public_base.css" />
    <link type="text/css" rel="stylesheet" href="shThemeMidnight.css" tppabs="http://nehe.gamedev.net/static/css/syntax_highlighter/shThemeMidnight.css"/>
    
    <link rel="alternate" type="application/atom+xml" title="Atom feed" href="index-1.htm" tppabs="http://nehe.gamedev.net/atom/" />
    <link rel="alternate" type="application/rss+xml" title="RSS feed" href="index-2.htm" tppabs="http://nehe.gamedev.net/rss/" />
    
    <meta name="author" content="Luke Benstead + Carsten Haubold" />
    <meta name="description" content="OpenGL Tutorials, Demos, Games and More..." />
    <meta name="keywords" content="opengl, tutorial, article, demo, game, blend, texturemap, lighting, contest, 3D" />

    
    

    

</script>


    
    
    
    
        
        <script type='text/javascript'>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
        (function() {
        var gads = document.createElement('script');
        gads.async = true;
        gads.type = 'text/javascript';
        var useSSL = 'https:' == document.location.protocol;
        gads.src = (useSSL ? 'https:' : 'http:') + 
        '//www.googletagservices.com/tag/js/gpt.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(gads, node);
        })();
        </script>

        <script type='text/javascript'>
        googletag.cmd.push(function() {
        googletag.defineSlot('/1004699/Leaderboard_NeHe', [728, 90], 'div-gpt-ad-1327940144417-0').addService(googletag.pubads());
        googletag.defineSlot('/1004699/Skyscraper_NeHe', [160, 600], 'div-gpt-ad-1327940144417-1').addService(googletag.pubads());
        googletag.pubads().enableSingleRequest();
        googletag.enableServices();
        });
        </script>
    
    

    
  </head>

  <body>
    
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "all.js#xfbml=1"/*tpa=http://connect.facebook.net/en_GB/all.js#xfbml=1*/;
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>




    <table cellpadding="0" cellspacing="0" border="0" id="layout_table">
    <tr><td>
        <div id="header">
                <a href="index.htm" tppabs="http://nehe.gamedev.net/"><img class="logo" class="logo" src="nehe.png" tppabs="http://nehe.gamedev.net/static/images/nehe.png" border="0" alt="Nehe" /></a>
        </div>            
    </td></tr>
    <tr><td colspan="2">
            
<div class="navbar">
    <a href="index.htm" tppabs="http://nehe.gamedev.net/">HOME</a>
    <a href="javascript:if(confirm('http://twitter.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://twitter.com/#!/nehegl'" tppabs="http://twitter.com/#!/nehegl">TWITTER</a>  
    <a href="javascript:if(confirm('http://www.facebook.com/pages/NeHe/300582493323181  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.facebook.com/pages/NeHe/300582493323181'" tppabs="http://www.facebook.com/pages/NeHe/300582493323181">FACEBOOK</a>     
    <a href="index-2.htm" tppabs="http://nehe.gamedev.net/rss/">RSS</a>    
    <a href="index-1.htm" tppabs="http://nehe.gamedev.net/atom/">ATOM</a>    
    <a href="javascript:if(confirm('http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions'" tppabs="http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions">FORUM</a>    
</div>
    
    </td></tr>
    <tr>
        <td class="col1">

            
<div id="article_container">


<h1 class="article-header">Billboarding How To</h1>
<div class="social-media">
<!-- Place this tag where you want the +1 button to render -->
<div class="g-plusone" data-size="medium" data-width="120" data-annotation="inline"></div>
<div class="fb-like" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" data-colorscheme="dark" data-font="arial"></div>
</div>
<div style="clear:both;"></div>
<p>&nbsp;</p>
<p><strong> <a href="#1">1. Introduction</a> <a href="#2">2. What is Billboarding</a> <a href="#3">3. Terms</a> <a href="#4">4. Point Sprites</a> <a href="#4.1"> 4.1 Collective Billboarding</a> <a href="#4.2"> 4.2 Individual Billboarding</a> <a href="#5">5. Axis Aligned Billboards</a> <a href="#6">6. Arbitrary Axis Billboards</a> <a href="#7">7. Using Those Billboard Vectors</a> <a href="#8">8. Rendering a Billboard</a></strong></p>
<p><a name="1"></a><strong><span style="text-decoration: underline;">1. Introduction</span></strong></p>
<p>I looked around a lot for a good billboarding tutorial, but the most I could ever find was a short document that missed a lot or some code with bad commenting. My intention with this document and code was to resolve those issues. I hope this document explains things well enough so you can get billboarding to work in your code. There is also accompanying source to demonstrate this, the source requires that you have freetype and directX5 to build; although I did include a Windows&reg; executable for those who cant build it. You may notice that there is a lot more code than just billboarding code that comes with. This is a collection of source I written over time, and most my projects I make are based on it. I made the billboarding code in a separate file from this, so hopefully you can just paste the source into your project if you so desire. Questions and comments can be emailed to: <a href="mailto:opengltut@hotmail.com">opengltut@hotmail.com</a>.</p>
<!-- break -->
<p>This document should give you an overview of billboarding and it should also teach you how to implement billboarding in your own code. This was written with the purpose of assisting the MDX file document to describe the billboarding techniques used for rendering the MDX models. But it is also intended to be a standalone tutorial. The MDX document is a collection of information on how to render the MDX models from Blizzards WarCraft3&reg;. This document is not finished yet, and will be released some day soon.</p>
<p><a name="2"></a><strong><span style="text-decoration: underline;">2. What is Billboarding</span></strong></p>
<p>Billboarding is a simple concept, but can be difficult to implement. A billboard is a flat object, usually a quad (square), which faces the camera. This direction usually changes constantly during runtime as the object and camera move, and the object needs to be rotated each frame to point in that direction. There are two types of billboarding: point and axis. Point sprites, or point billboards, are a quad that is centered at a point and the billboard rotates about that central point to face the user. Axis billboards come in two types: axis aligned and arbitrary. The axis-aligned (AA) billboards always have one local axis that is aligned with a global axis, and they are rotated about that axis to face the user. The arbitrary axis billboards are rotated about any axis to face the user.</p>
<p>Billboards will always face the camera, but this technique can also be used to face other objects as well. For instance, this can be used to rotate a turret to face a target, or to have the head on a character follow another character.</p>
<p>The concepts in the document use the right handed coordinate system and assume that the billboards you are drawing will face down the +z axis, up is the +y axis, and right is the +x axis. I found this site: <a href="javascript:if(confirm('http://www.evl.uic.edu/ralph/508S98/coordinates.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.evl.uic.edu/ralph/508S98/coordinates.html'" tppabs="http://www.evl.uic.edu/ralph/508S98/coordinates.html" target="_blank">http://www.evl.uic.edu/ralph/508S98/coordinates.html</a> has a good explanation.</p>
<p><a name="3"></a><strong><span style="text-decoration: underline;">3. Terms</span></strong></p>
<table style="width: 100%;" border="0">
<tbody>
<tr>
<td><span class="text"><strong>Point sprite</strong></span></td>
<td><span class="text">A quad billboard rotated about a central point that faces the camera.</span></td>
</tr>
<tr>
<td><span class="text"><strong>Axis Aligned billboard</strong></span></td>
<td><span class="text">A billboard that rotates about an axis (x, y, z). The up vector for the billboard is along that axis.</span></td>
</tr>
<tr>
<td><span class="text"><strong>Axis billboard</strong></span></td>
<td><span class="text">A billboard that is aligned along an arbitrary axis, this can include axis aligned billboards. The up vector for the billboard is along the arbitrary axis.</span></td>
</tr>
<tr>
<td><span class="text"><strong>Look vector</strong></span></td>
<td><span class="text">The direction the object is facing.</span></td>
</tr>
<tr>
<td><span class="text"><strong>Up vector</strong></span></td>
<td><span class="text">The up direction of the object.</span></td>
</tr>
<tr>
<td><span class="text"><strong>Right vector</strong></span></td>
<td><span class="text">The right direction of the object.</span></td>
</tr>
<tr>
<td><span class="text"><strong>Global axis</strong></span></td>
<td><span class="text">The axis system for the entire application as defined by OpenGL with no transformations applied.</span></td>
</tr>
</tbody>
</table>
<p><a name="4"></a><strong><span style="text-decoration: underline;">4. Point Sprites</span></strong></p>
<p>Points sprites are the most common billboard you will usually see, and of course they have a couple flavors to them. The sprites can be billboarded collectively or individually. Collective billboarding is very quick, because you only need to create one transformation matrix to share between all the points, while individual billboards require that you calculate a new transformation matrix for each billboard.</p>
<p><a name="4.1"></a><strong><span style="text-decoration: underline;">4.1. Collective Billboarding</span></strong></p>
<p>Collective billboards all face the same direction, and start to look flat as they get closer to the edges of the screen. This is because the direction the billboards face is calculated as the inverse look direction of the camera. This makes a quick and dirty calculation, but may not create the effect you are looking for. The up vector for the collective point sprite is the same as the up vector for the camera. And the right vector is the inverse of the cameras right vector.</p>
<p><a name="4.2"></a><strong><span style="text-decoration: underline;">4.2. Individual Billboarding</span></strong></p>
<p>Individual billboards require some math to point at the camera. To start, you will need to know the camera up vector and position and the billboard position. We will use these to calculate the local billboards axis. The billboard look vector is calculated from the camera position and billboard position. The vector is from the billboard to the camera; normalize the vector when finished.</p>
<pre>look = camera_pos - point_pos;</pre>
<p>Next, calculate the right vector for the billboard. To do this though, you first need an up vector for the billboard. But to get the final up vector you first need the billboards right vector. Obviously were going nowhere here, but there is a simple way out. We can use the camera up vector as the temporary up vector for the billboard. This works because the final billboard up vector, the billboard look vector, and the camera up vector lie along the plane that contains the camera and billboard locations. The plane also has a normal equal to the billboard right vector. That can be a lot to take in, so look at this pretty picture to help. The blue vectors are the direction the object is facing, the green vectors are up vectors, and the red vectors are right.</p>
<center><img src="figure1-3.jpg" tppabs="http://nehe.gamedev.net/data/articles/extras/article19/figure1.jpg" alt="" width="275" height="187" /><br /> <strong><span>Figure 1 - All three green vectors lie in the plane outlined in grey, the dark blue vector on the<br /> particle also lies in this plane. The dark red vector is perpendicular to the plane.</span></strong></center>
<p><br /> With the billboard look vector and the camera up vector, we can get the right vector by calculating the cross product of the two vectors. Both the up and look vectors are normalized at this point, so the result will also be normalized.</p>
<pre>right = up x look;</pre>
<p>We can now calculate the up vector for the billboard with another cross product; this is the final up vector for the billboard.</p>
<pre>up = look x right;</pre>
<p>Now, you may be asking yourself why we couldnt just use the camera up vector for the billboard up vector. If we did this, our local axis for the billboard (right, up, look) wouldnt all be perpendicular to each other, that is some of the angles between the axis would not be 90&ordm; to the other axis. This would make for some odd side effects when applying the rotation matrix to use for billboarding our object.</p>
<p><a name="5"></a><strong><span style="text-decoration: underline;">5. Axis Aligned Billboards</span></strong></p>
<p>Axis aligned billboards lock their up vector into a global axis, either x or y or z. The billboard is then rotated around the local y axis to face the camera. The calculations follow the same format as above, but we are given the local up vector to make the math simpler.</p>
<center><img src="figure2-3.jpg" tppabs="http://nehe.gamedev.net/data/articles/extras/article19/figure2.jpg" alt="" width="579" height="130" /><br /> <strong><span>Figure 2  The three Axis Aligned billboards, each access shows the local Y axis drawn in green over<br /> the axis that the billboard is aligned to. The billboard is draw in its axis color about that axis.</span></strong></center>
<p><br /> There are three cases of axis aligned billboards, one for each axis. As stated above, the billboard is always rotated about the local Y axis. This means that the local Y axis is rotated into the global axis that we are aligned to. This also means that we dont need to create the billboard up vector from the camera up vector, it is given to us. We can follow the steps as we did for the point sprite. Calculate the billboard look vector as the vector from the billboard center to the camera location; then zero the value for the axis we are aligned to and normalize the vector. The up vector is given to us as the aligned axis which means we dont need to use a temporary up vector to create the right vector. Instead we can calculate the right vector as the cross product of up and look and were done.</p>
<pre>right = up x look;</pre>
<p>&nbsp;</p>
<p><a name="6"></a><strong><span style="text-decoration: underline;">6. Arbitrary Axis Billboards</span></strong></p>
<p>Arbitrarily aligned billboards might sound difficult, heck it kind of hard to pronounce, but they follow a similar idea and code path as the rest of the billboards types. The billboard calculation starts like the rest, calculate the billboard look vector as the vector from the billboard center to the camera position. Although this value isnt the final look vector, its a temporary value used to calculate the right and up vectors. This works on the same principal as the point sprite using the camera up vector as a temporary billboard up vector. This look vector lies along the same plane as the final look vector will; but the temporary look vector is not perpendicular to the billboard up vector. The billboard up vector is the arbitrary axis we want the billboard to rotate about. Now that we have two vectors we can do a cross product to get the right vector.</p>
<pre>right = up x look;</pre>
<p>&nbsp;</p>
<center><img src="figure3-3.jpg" tppabs="http://nehe.gamedev.net/data/articles/extras/article19/figure3.jpg" alt="" width="168" height="159" /><br /> <strong><span>Figure 3  Representation of a particle billboarded about an arbitrary axis. The green vectors are up<br /> vectors, the blue are look vectors, the red are right vectors, and the gold is the temporary<br /> look vector. The top left object is the particle and the bottom right is the camera.</span></strong></center>
<p><br /> Now, there is a special case to watch out for. When the billboard up vector is almost parallel to the billboard look vector, the cross product doesnt result in a normalized vector, due to floating point limitations. If the vectors are parallel, the cross product will have a magnitude of zero, thats just how they work. For these reasons, we will recalculate the unit vector for the right vector. If the look and up vectors are parallel, you can choose to not draw the particle since you would be looking down the edge of a flat polygon anyways. The code sample chooses to live with whatever side-effects may arise when the look and up vectors are parallel because this event is extremely rare. It requires the two vectors to be exactly parallel, if they are just really close, the normalization should fix it.</p>
<p>Now that we have legitimate up and right vectors, we can get back to calculating the final look vector.</p>
<pre>look = right x up;</pre>
<p>Not so bad after all, we can now use these vectors to calculate the billboard matrix. Read on to see how.</p>
<p><a name="7"></a><strong><span style="text-decoration: underline;">7. Using Those Billboard Vectors</span></strong></p>
<p>Ok, youve found multiple ways to create a local coordinate system for a billboard. Now youre wondering how to make use of them. Ive saved that until now because they all follow the same code to make the billboard a billboard. Keep in mind that all our billboard vectors are normalized, so we can use the rule of orthogonal matrices to create a rotation matrix for the billboard. The whole orthogonal matrix explanation is outside the scope of this document, so just implement as I show you and it will work :) The rules state that in order to transform the local coordinates into the global coordinates we must multiply by this vector.</p>
<pre>	[r1	u1	l1	px]
	[r2	u2	l2	py]
	[r3	u3	l3	pz]
	[0	0	0	1]
</pre>
<p>The vectors are (r)ight, (u)p, (l)ook; and the values are the offsets in the vector (1, 2, 3). The right, up, and look vectors are as you guessed, the values we calculated earlier. This matrix will transform the billboard coordinate system into the global coordinate system. Now you can multiply by this in the rendering stage and your billboard will be properly facing the camera. If you havent figured it out already, the p* values are the world position of the billboard (px, py, pz).</p>
<p>Make sure you push the current model view matrix before multiplying by this transformation matrix and then pop the matrix after rendering the quad. If you dont, you will end up only having the first billboard work as the billboard matrices will accumulate in the model view matrix.</p>
<p><a name="8"></a><strong><span style="text-decoration: underline;">8. Rendering a Billboard</span></strong></p>
<p>Lastly, we need to know how to render a billboard. For all the above calculations, we set the Y axis to the billboard up vector, and the X axis to the right vector. So the billboard is drawn along the XY plane facing down the +Z axis.</p>
<pre>glBegin(GL_TRIANGLE_FAN);
glVertex3f(10, -12, 0);
glVertex3f(10, 12, 0);
glVertex3f(-10, 12, 0);
glVertex3f(-10, -12, 0);
glEnd();
</pre>
<p>You can change the coordinate values for the billboard as needed. They dont need to be a square or rectangle either; just make sure all the points are on the same plane. Of course if the points dont lie on the XY plane the billboard wont work.</p>
<p>If your billboards arent in the XY plane, youll need to adjust the billboard matrix that is created so that the billboard look vector is the normal to the plane that the billboard is on. For instance, if you billboard is in the XZ plane, the normal for that plane is the +Y axis. Your billboard look vector now needs to be rotated into the +Y axis. The billboard up vector will be rotated into the +Z axis, and the right vector is the cross from look to up, which is the +X axis.</p>
<p><strong>Download the code for this article:</strong> <a href="javascript:if(confirm('http://nehe.gamedev5.net/data/articles/extras/article19/billboard.zip  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://nehe.gamedev5.net/data/articles/extras/article19/billboard.zip'" tppabs="http://nehe.gamedev.net/data/articles/extras/article19/billboard.zip">Billboard Demo</a></p>


</div>
</div>



            <div style="width:728px;padding:0px;margin:auto; margin-top: 10px;">
            

    
                <!-- Leaderboard_NeHe -->
                <div id='div-gpt-ad-1327940144417-0' style='width:728px; height:90px;'>
                <script type='text/javascript'>
                googletag.cmd.push(function() { googletag.display('div-gpt-ad-1327940144417-0'); });
                </script>
                </div>
            

                           
            </div>   
        </td>
        <td class="col2">
            




<div style="text-align: center; padding:10px;">

<script type='text/javascript'>
    GA_googleFillSlot("Skyscraper_NeHe");
</script>

</div>
            
        </td>
    </table>
    <div id="footer">
        <p>
            
    
    © 1997-2012 Gamedev . All rights reserved.<br/>

			NeHe™ and NeHe Productions™ are trademarks of GameDev.net, LLC<br/>
			OpenGL® is a registered trademark of Silicon Graphics Inc.<br/>
		</p>        
		<br/>
    </div>

    
    
	    <script type="text/javascript" src="shCore.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shCore.js"></script>
        <script type="text/javascript" src="shBrushCpp.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shBrushCpp.js"></script>
	    <script type="text/javascript" src="shBrushJScript.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shBrushJScript.js"></script>
	    <script type="text/javascript">SyntaxHighlighter.all();</script>
    

    <!-- Place this render call where appropriate -->
    <script type="text/javascript">
      (function() {
        var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
        po.src = 'plusone.js'/*tpa=https://apis.google.com/js/plusone.js*/;
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
      })();
    </script>    

    
<!-- GoogleAnalytics code -->
<script src="urchin.js" tppabs="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-279474-2"; // Gamedev
urchinTracker();
_uff = 0; // Reset for second account
_uacct = "UA-24180731-1"; // Non-GD
urchinTracker();
</script> 
  </body>
</html>
