<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
    dir="ltr"
    xml:lang="en"
    lang="en">
  <head>
    <title>NeHe Productions: </title>

    <link rel="stylesheet" type="text/css" href="public_base.css" tppabs="http://nehe.gamedev.net/static/css/public_base.css" />
    <link type="text/css" rel="stylesheet" href="shThemeMidnight.css" tppabs="http://nehe.gamedev.net/static/css/syntax_highlighter/shThemeMidnight.css"/>
    
    <link rel="alternate" type="application/atom+xml" title="Atom feed" href="index-1.htm" tppabs="http://nehe.gamedev.net/atom/" />
    <link rel="alternate" type="application/rss+xml" title="RSS feed" href="index-2.htm" tppabs="http://nehe.gamedev.net/rss/" />
    
    <meta name="author" content="Luke Benstead + Carsten Haubold" />
    <meta name="description" content="OpenGL Tutorials, Demos, Games and More..." />
    <meta name="keywords" content="opengl, tutorial, article, demo, game, blend, texturemap, lighting, contest, 3D" />

    
    

    
    

    
    
    
        <script type='text/javascript'>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
        (function() {
        var gads = document.createElement('script');
        gads.async = true;
        gads.type = 'text/javascript';
        var useSSL = 'https:' == document.location.protocol;
        gads.src = (useSSL ? 'https:' : 'http:') + 
        '//www.googletagservices.com/tag/js/gpt.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(gads, node);
        })();
        </script>

        <script type='text/javascript'>
        googletag.cmd.push(function() {
        googletag.defineSlot('/1004699/Leaderboard_NeHe', [728, 90], 'div-gpt-ad-1327940144417-0').addService(googletag.pubads());
        googletag.defineSlot('/1004699/Skyscraper_NeHe', [160, 600], 'div-gpt-ad-1327940144417-1').addService(googletag.pubads());
        googletag.pubads().enableSingleRequest();
        googletag.enableServices();
        });
        </script>
    
    
  </head>

  <body>
    
    <table cellpadding="0" cellspacing="0" border="0" id="layout_table">
    <tr><td>
        <div id="header">
                <a href="index.htm" tppabs="http://nehe.gamedev.net/"><img class="logo" class="logo" src="nehe.png" tppabs="http://nehe.gamedev.net/static/images/nehe.png" border="0" alt="Nehe" /></a>
        </div>            
    </td></tr>
    <tr><td colspan="2">
            
<div class="navbar">
    <a href="index.htm" tppabs="http://nehe.gamedev.net/">HOME</a>
    <a href="javascript:if(confirm('http://twitter.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://twitter.com/#!/nehegl'" tppabs="http://twitter.com/#!/nehegl">TWITTER</a>  
    <a href="javascript:if(confirm('http://www.facebook.com/pages/NeHe/300582493323181  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.facebook.com/pages/NeHe/300582493323181'" tppabs="http://www.facebook.com/pages/NeHe/300582493323181">FACEBOOK</a>     
    <a href="index-2.htm" tppabs="http://nehe.gamedev.net/rss/">RSS</a>    
    <a href="index-1.htm" tppabs="http://nehe.gamedev.net/atom/">ATOM</a>    
    <a href="javascript:if(confirm('http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions'" tppabs="http://www.gamedev.net/forum/27-nehe-productions/page__forum_title__NeHe+Productions">FORUM</a>    
</div>
    
    </td></tr>
    <tr>
        <td class="col1">

            
<div id="news_container">
    <div class="news_header">
        <h1>Articles </h1>
    </div>
    
    
        <div class="news_box">
            <div class="title">
                EXPLANATION OF THE TRANSLATION METHOD
            </div>
            <div class="body">
                <p>Once your OpenGL window is made, and you compile and open it, you're staring at a black screen. OpenGL is a 3D rendering engine, which I'm sure you know if you're trying to learn it. So where exactly are you if you're just staring into blackness, or whiteness, depending on what color you put into glClearColor. Well, imagine a grid. The grid is 20 units long, and 20 units wide. Now in reality of OpenGL, there is no limit to the space you have. But for this idea, imagine it being 20x20. Your camera is sitting in the very center of the grid, at 10 units up, 10 units in. This is the center, just like in math, and it is divided into four quadrants.</p>

            </div>
            <div>
            	<p>
            		<strong><a href="index-121.htm" tppabs="http://nehe.gamedev.net/article/explanation_of_the_translation_method/24002/">CONTINUE READING</a></strong>
            	</p>
            </div>
        </div>        
    
        <div class="news_box">
            <div class="title">
                IMPROVED TIMING
            </div>
            <div class="body">
                <p>I have often downloaded demos that were either running to fast or to slow for my computer. A nice demo that runs so fast that it more looks like a flickering set of images or where the mouse or other controls makes the screen spin out of control is just as annoying as viewing something at 3 fps.</p>
<p>I have therefore written this small article about timing.</p>

            </div>
            <div>
            	<p>
            		<strong><a href="index-122.htm" tppabs="http://nehe.gamedev.net/article/improved_timing/15010/">CONTINUE READING</a></strong>
            	</p>
            </div>
        </div>        
    
        <div class="news_box">
            <div class="title">
                GAME INPUT CLASS
            </div>
            <div class="body">
                <center>Version 1.01</center><center>Made For The Windows Operating System</center>
<p><strong><span style="text-decoration: underline;">1. About The Class</span></strong> <br /><br /> This class makes it possible to input strings, chars and integers in OpenGL while working with the Windows API. You can use it in MFC too.</p>
<p><strong><span style="text-decoration: underline;">2. How To Use This Class</span></strong> <br /><br /> In order to use this class, you have to have access to it's GetInput function from the Window Procedure (WndProc usually). Therefore, I suggest you define a global variable of the class, or make a GetInput function in the class that contains it that simply calls GetInput from this class. In the WndProc's WM_EVENT call the GetInput function with the WPARAM variable.</p>
<p>An example:</p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">switch (uMsg)					// type of uMsg is UINT
{
	
	case WM_KEYDOWN:
	{
		InputClass.GetInput(wParam);	// type of InputClass  CGLInput
						// type of wParam - WPARAM
		
	}
	
}
</pre>
<p>The end of an input is when user presses the ENTER key (VK_RETURN constant). Because a lot of people use enter in their programs, I suggest you call the FixEnterCollide function every frame.</p>
<p>After you've done that, you can start using the class for input. The class ostensibly works in the background (because it's based on Windows Events), so you can draw or do other things while the user inputs.</p>
<p>The class works by "processes"  it has a process for each input type  integer, string or char. In order to get input, you begin a process (using the BeginProcess function. This function gets the kind of process you want to begin). Now any keys that are pressed will be handled by the input class up until the user presses the ENTER key.</p>
<p>You can use the IsOver function to determine whether the process is over or not. If it is, use the GetInt, GetStr or GetChar function to get the input. Once you use one of these functions, the process is automatically cancelled. In your rendering loop use the DrawInput function so the user can see the input.</p>
<p>Many people use the ENTER key for various things. If you do as well, make sure you call the FixEnterCollide function in the main loop of your program. It will fix the "collides" between the input class and use of Enter in the program itself.</p>
<p><strong><span style="text-decoration: underline;">3. The Function Table For This Class</span></strong> <br /><br /></p>
<table style="width: 75%;" border="1" align="center">
<tbody>
<tr>
<td class="news"><span class="head">Function Name</span></td>
<td class="news"><span class="head">How To Use It</span></td>
</tr>
<tr>
<td class="back2"><span class="text">BeginProcess(GLuint)</span></td>
<td class="back2"><span class="text">Begins an input process. The only parameter is what kind of a process you want to begin. Enter one of the process variables (see the class Process Constants Table)</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetInput(WPARAM)</span></td>
<td class="back2"><span class="text">Call this function with from the WndProc function as explained above.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetStr(char*)</span></td>
<td class="back2"><span class="text">Gets a pointer to char (or name of a char array) and makes it a pointer to the string. It must have enough room for the string. Use GetStrLen to verify it. If the process isn't over, it will return false, else true.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetInt(int&amp;)</span></td>
<td class="back2"><span class="text">Parameter is an int variable (by reference). If the process is over, it will return true and will substitute the data user has entered. If the process isn't over, it returns false.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetInt( )</span></td>
<td class="back2"><span class="text">Returns the integer that the user entered, if process is over.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetChar(char&amp;)</span></td>
<td class="back2"><span class="text">Puts in the char variable the char that the user has entered and returns true if process is over. Otherwise it returns false.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetChar( )</span></td>
<td class="back2"><span class="text">Returns the char that that the user entered if process is over.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">GetProcess( )</span></td>
<td class="back2"><span class="text">Returns the value of the Process Constant of the current process. Returns PR_NO_PROCESS if there is no process.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">IsOver( )</span></td>
<td class="back2"><span class="text">Returns true if a process is over, otherwise false.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">DrawInput( GLYPHMETRICSFLOAT* ,GLuint)</span></td>
<td class="back2"><span class="text">The function draws the input of the user. 1st Parameter is a pointer to an array that contains the information about the font. 2nd parameter is the base display list for the font. If current process is PR_NO_PROCESS, then nothing will be drawn (no output).</span></td>
</tr>
</tbody>
</table>
<p><strong><span style="text-decoration: underline;">4. Process Constants Table</span></strong> <br /><br /></p>
<table style="width: 75%;" border="1" align="center">
<tbody>
<tr>
<td class="news"><span class="head">Constant's Name</span></td>
<td class="news"><span class="head">Value</span></td>
<td class="news"><span class="head">Meaning</span></td>
</tr>
<tr>
<td class="back2"><span class="text">PR_NO_PROCESS</span></td>
<td class="back2"><span class="text">0</span></td>
<td class="back2"><span class="text">No process. If this is the parameter of BeginProcess function, the current process is stopped.</span></td>
</tr>
<tr>
<td class="back2"><span class="text">PR_GETCHAR</span></td>
<td class="back2"><span class="text">1</span></td>
<td class="back2"><span class="text">Get char process</span></td>
</tr>
<tr>
<td class="back2"><span class="text">PR_GETINTEGER / PR_GETINT</span></td>
<td class="back2"><span class="text">2</span></td>
<td class="back2"><span class="text">Get integer process</span></td>
</tr>
<tr>
<td class="back2"><span class="text">PR_GETSTRING / PR_GETSTR</span></td>
<td class="back2"><span class="text">3</span></td>
<td class="back2"><span class="text">Get string process</span></td>
</tr>
</tbody>
</table>
<p>There is obviously no need knowing the values of the constants.</p>
<p><strong><span style="text-decoration: underline;">5. Example</span></strong></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">#include "CGLInput.h"

CGLInput IC1;					// Define A Global Input Class Variable

LRESULT CALLBACK WndProc(	HWND hWnd,
				UINT uMsg,
				WPARAM wParam,
				LPARAM lParam )
{
	switch (uMsg)
	{
		
		case WM_KEYDOWN:
		{
			InputClass.GetInput(wParam);			
			
		}
		
	}
}

	IC1.BeginProcess(PR_GETINT);		// Begin a Get Int Process

void DrawEverything()				// Constantly Draws The Scene
{
	int input;
	
	IC1.DrawInput();			// Draw The Input. If Process Is
						// PR_NO_PROCESS, Nothing
						// Is Drawn.
	
	if(IC1.IsOver())			// Is The Process Over?
	{
		IC1.GetInt(input);		// If So, Put The Input In A Variable
	}
	
}
</pre>
<center><span style="font-size: x-small;"><span style="text-decoration: underline;">CGLOutput  OpenGL Output Class</span></span></center>
<p>&nbsp;</p>
<center><span style="font-size: xx-small;">By: Aviram Cohen</span></center>
<p>&nbsp;</p>
<center>Version 1.00</center><center>Made For The Windows Operating System</center>
<p><strong><span style="text-decoration: underline;">1. About The Class</span></strong> <br /><br /> This class makes it possible to create a font and display all kinds of text in OpenGL. Unlike the class CGLInput, this class can work great under MFC (but if you use it, you have to go to the settings of the project in VC++ 6.0 and choose not to use precompiled headers for the files of this class). The functions of the class are based on the ones that appear on this site (http://nehe.gamedev.net).</p>
<p><strong><span style="text-decoration: underline;">2. How To Use The Class</span></strong> <br /><br /> First of all, you have to define (of course) a variable. Then use the SetFont function to set the font's definitions. Once you have called the SetFont function, you can use the Print function exactly the same way you would use printf (standard I/O in the C Language). You can use SetFont more than once in order to change the font's properties.</p>
<p><strong><span style="text-decoration: underline;">3. The Functions Of This Class</span></strong> <br /><br /> SetFont:</p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">void SetFont(	HDC hDC,
		char* fName = NULL,
		GLfloat fDepth = 0.5f,
		int fWeight = FW_BOLD,
		DWORD fItalic = FALSE,
		DWORD fUnderline = FALSE,
		DWORD fStrikeOut = FALSE,
		DWORD fCharSet = ANSI_CHARSET  )
</pre>
<p>Parameters: <br /><br /> <em>hDC</em><br />Handle of GDI Device Context <br /><br /> <em>fName</em><br />Font name as defined in Windows, for example "Arial" or "Times New Roman". <br /><br /> <em>fDepth</em><br />How "deep" the font goes, meaning how long it gets on the Z Axis. <br /><br /> <em>fWeight</em><br />Weight of the font. There is a list of values that will fit. <br /><br /> <em>fItalic</em><br />For italic font TRUE, otherwise FALSE. <br /><br /> <em>fUnderline</em><br />For underlined font TRUE, otherwise FALSE. <br /><br /> <em>fStrilkeOut</em><br />For strikeout font TRUE, otherwise FALSE. <br /><br /> <em>fCharSet</em><br />The character set. For a specific language, it is the name of language in capital letters, then CHARSET. For example, GREEK_CHARSET or HEBREW_CHARSET. It can write in english, so if you don't use another language, just leave it or enter ANSI_CHARSET, which is default.</p>
<p><strong>Print:</strong></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">bool Print(const char *fmt, ...)
</pre>
<p>Parameters: <br /><br /> A string and afterwards the variables that you want to print, in the same template as the printf function uses.</p>
<p>Return Values: <br /><br /> If the font isn't set or if the entered string is NULL, the function will return true. Otherwise it will return false.</p>
<p><strong><span style="text-decoration: underline;">4. Class Constants</span></strong> <br /><br /> The class has only one constant - GLO_DEFAULT_FONT[ ] of char. It contains the name of the default font (that is used in case no font name is given or NULL was entered for the fName parameter of SetFont.</p>
<p><strong><span style="text-decoration: underline;">5. Font Weights</span></strong> <br /><br /> This table of font weights appears in MSDN:</p>
<table style="width: 75%;" border="1" align="center">
<tbody>
<tr>
<td class="news"><span class="head">Value</span></td>
<td class="news"><span class="head">Weight</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_DONTCARE</span></td>
<td class="back2"><span class="text">0</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_THIN</span></td>
<td class="back2"><span class="text">100</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_EXTRALIGHT</span></td>
<td class="back2"><span class="text">200</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_ULTRALIGHT</span></td>
<td class="back2"><span class="text">200</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_LIGHT</span></td>
<td class="back2"><span class="text">300</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_NORMAL</span></td>
<td class="back2"><span class="text">400</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_REGULAR</span></td>
<td class="back2"><span class="text">400</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_MEDIUM</span></td>
<td class="back2"><span class="text">500</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_SEMIBOLD</span></td>
<td class="back2"><span class="text">600</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_DEMIBOLD</span></td>
<td class="back2"><span class="text">600</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_BOLD</span></td>
<td class="back2"><span class="text">700</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_EXTRABOLD</span></td>
<td class="back2"><span class="text">800</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_ULTRABOLD</span></td>
<td class="back2"><span class="text">800</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_HEAVY</span></td>
<td class="back2"><span class="text">900</span></td>
</tr>
<tr>
<td class="back2"><span class="text">FW_BLACK</span></td>
<td class="back2"><span class="text">900</span></td>
</tr>
</tbody>
</table>
<p><strong><span style="text-decoration: underline;">6. Example</span></strong></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">#include "CGLOutput.h"

char myname[];

CGLOutput OC;					// Output Class Variable

OC.SetFont(hDC, "Comic Sans MS");		// Set The Font
OC.Print("Hello %s", myname);			// Print "hello" + a string.

</pre>
<center><span style="font-size: x-small;"><span style="text-decoration: underline;">CGLIO  OpenGL Input/Output Class</span></span></center>
<p>&nbsp;</p>
<center><span style="font-size: xx-small;">By: Aviram Cohen</span></center>
<p>&nbsp;</p>
<p><strong><span style="text-decoration: underline;">1. About The Class</span></strong> <br /><br /> The class brings the Input and Output classes together.</p>

            </div>
            <div>
            	<p>
            		<strong><a href="index-123.htm" tppabs="http://nehe.gamedev.net/article/game_input_class/16014/">CONTINUE READING</a></strong>
            	</p>
            </div>
        </div>        
    
        <div class="news_box">
            <div class="title">
                BILLBOARDING HOW TO
            </div>
            <div class="body">
                <p>&nbsp;</p>
<p><strong> <a href="#1">1. Introduction</a> <a href="#2">2. What is Billboarding</a> <a href="#3">3. Terms</a> <a href="#4">4. Point Sprites</a> <a href="#4.1"> 4.1 Collective Billboarding</a> <a href="#4.2"> 4.2 Individual Billboarding</a> <a href="#5">5. Axis Aligned Billboards</a> <a href="#6">6. Arbitrary Axis Billboards</a> <a href="#7">7. Using Those Billboard Vectors</a> <a href="#8">8. Rendering a Billboard</a></strong></p>
<p><a name="1"></a><strong><span style="text-decoration: underline;">1. Introduction</span></strong></p>
<p>I looked around a lot for a good billboarding tutorial, but the most I could ever find was a short document that missed a lot or some code with bad commenting. My intention with this document and code was to resolve those issues. I hope this document explains things well enough so you can get billboarding to work in your code. There is also accompanying source to demonstrate this, the source requires that you have freetype and directX5 to build; although I did include a Windows&reg; executable for those who cant build it. You may notice that there is a lot more code than just billboarding code that comes with. This is a collection of source I written over time, and most my projects I make are based on it. I made the billboarding code in a separate file from this, so hopefully you can just paste the source into your project if you so desire. Questions and comments can be emailed to: <a href="mailto:opengltut@hotmail.com">opengltut@hotmail.com</a>.</p>

            </div>
            <div>
            	<p>
            		<strong><a href="index-124.htm" tppabs="http://nehe.gamedev.net/article/billboarding_how_to/18011/">CONTINUE READING</a></strong>
            	</p>
            </div>
        </div>        
    
        <div class="news_box">
            <div class="title">
                BUMP MAPPING
            </div>
            <div class="body">
                <p><strong><span style="text-decoration: underline;">What Is Bump Mapping?</span></strong></p>
<p>Bump Mapping is a special sort of per pixel lighting (remember: OpenGL lighting is per vertex; a color is computed for each vertex and then interpolated across the triangle, quad, ). The famous lighting models (for example the OpenGL lighting) uses the normal to calculate a lighting color. Normally (at per vertex lighting) this normal is provided just like the vertex coordinate or texture coordinate. The idea behind Bump Mapping is to use different normals for each pixel (rather than for each vertex).</p>
<p><strong><span style="text-decoration: underline;">But Why Do That?</span></strong></p>
<p>Imagine you have a flat surface (like a triangle or a quad). The normal for this surface is equal in every point on this surface. Using different normals on a surface makes it bumpy, not straight flat. But remember we are only able to draw flat primitives like triangles or quads. So Bump Mapping is just a fake technology for rendering bumpy surfaces.</p>
<p><strong><span style="text-decoration: underline;">But Why Using Bump Mapping?</span></strong></p>
<p>Bump Mapping is supported in hardware on GeForce 256 (and up) and Radeon 7200 (and up). Bump Mapping can be performed in texture environment stages (see implementations) and is a very inexpensive feature for rendering a more beautiful world.</p>
<p><strong><span style="text-decoration: underline;">Bump Mapping - How Does It Work?</span></strong></p>
<p>There are some different bump mapping technologies:</p>
<table border="0">
<tbody>
<tr>
<td><span class="text"><strong>DP3 Bump Mapping</strong></span></td>
<td width="20px">&nbsp;</td>
<td><span class="text">The most used bump mapping technology.</span></td>
</tr>
<tr>
<td><span class="text"><strong>Gloss Bump Mapping</strong></span></td>
<td width="20px">&nbsp;</td>
<td><span class="text">A technology which doesnt need DP3 Bump Mapping support in hardware, quite bad results.</span></td>
</tr>
<tr>
<td><span class="text"><strong>Cross Plane Bump Mapping</strong></span></td>
<td width="20px">&nbsp;</td>
<td><span class="text">A technology developed by Yuriy V. Miroshnik (see reference [6]).</span></td>
</tr>
</tbody>
</table>
<p><br /> In this article Ill cover DP3 Bump Mapping</p>
<p>First lets take a look at the OpenGL lighting equation:</p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">&lt;img src="extras/article20/figure1.jpg"&gt;
</pre>
<p>Quite confusing, eh? :-)</p>
<p>But we are interested in the middle part, the diffuse part only (if you dont know how OpenGL lighting works, take a look at <a href="javascript:if(confirm('http://nehe.gamedev.net/_admin/article/edit/25006/extras/article20/lecture2_9jan.pdf  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a path excluded by the site\'s Robot Exclusion parameters.  (Teleport Pro\'s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?'))window.location='http://nehe.gamedev.net/_admin/article/edit/25006/extras/article20/lecture2_9jan.pdf'" tppabs="http://nehe.gamedev.net/_admin/article/edit/25006/extras/article20/lecture2_9jan.pdf" target="_blank">http://www.cs.tcd.ie/courses/baict/bass/4ict10/Hillary2003/pdf/Lecture2_9Jan.pdf</a>.</p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">&lt;img src="extras/article20/figure2.jpg"&gt;
</pre>
<p>n is the vertex normal<br /> V is the vertex coordinate<br /> P is the coordinate of light i<br /> VP is the vector from the vertex coordinate to the light i<br /> dcm is the diffuse color of the material<br /> ddi is the diffuse color of light i</p>
<p>Remember that the vector from the vertex coordinate to the light and the vertex normal has to be normalized We have heard that DP3 Bump Mapping is performed in hardware using texture environments. But how does this work with our lighting equation above? Modern 3D Cards supports a new texture environment extension: ARB_texture_env_dot3 This extension requires ARB_texture_env_combine and adds a new texture combiner operation: DOT3_RGB_ARB (and DOT3_RGBA_ARB, but this is less important).</p>
<p><strong><span style="text-decoration: underline;">First Of All: What Are Texture Environments?</span></strong></p>
<p>A texture environment describes how a sampled texel of a certain texture unit is combined with the other values. There is a texture environment for each texture unit available. When a primitive is rendered (and texturing is enabled), the texture environment of the first texture is computed and the result is sent to the next texture environment. Normally all texture environments are set to GL_MODULATE, which means that the value of the last texture unit (at the first texture unit the primary color set by glColor or the color calculated by lighting is used) is multiplied by the texel of the current texture unit. The result of the last active texture unit is the color of our pixel.</p>
<p>Here an example:<br /> The primary color is set to (1.0, 1.0, 1.0)<br /> The texel of the first texture unit is (1.0, 1.0, 0.0)<br /> The texel of the second texture unit is (0.0, 1.0, 1.0)<br /> All texture environments are set to GL_MODULATE</p>
<p>So the output of the first texture environment is (0.5, 1.0, 1.0) * (1.0, 1.0, 0.0) = (0.5, 1.0, 0.0)<br /> The output of the second texture environment is (0.5, 1.0, 0.0) * (0.0, 1.0, 1.0) = (0.0, 1.0, 0.0)<br /> So our pixel has a color of (0.0, 1.0, 0.0) = green</p>
<p>You also can perform much more complex environment operations using ARB_texture_env_combine (see <a href="javascript:if(confirm('http://nehe.gamedev.net/_admin/article/edit/25006/extras/article20/texture_env_combine.txt  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a path excluded by the site\'s Robot Exclusion parameters.  (Teleport Pro\'s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?'))window.location='http://nehe.gamedev.net/_admin/article/edit/25006/extras/article20/texture_env_combine.txt'" tppabs="http://nehe.gamedev.net/_admin/article/edit/25006/extras/article20/texture_env_combine.txt" target="_blank">http://oss.sgi.com/projects/ogl-sample/registry/ARB/texture_env_combine.txt</a>)</p>
<p>Before we return to Bump Mapping theres another thing which is important:</p>
<p><strong><span style="text-decoration: underline;">Normalization Cube Maps</span></strong></p>
<p>A cube map is a special form of a texture. Exactly there are 6 2D textures in one cube map. They represent the 6 faces of a cube (thats why they are called cube maps :-). Giving a 3D vector to a cube map it returns the texture value where this vector cuts the unit cube. Normally cube maps are used for view independent reflections. But a big advantage of cube maps is that this vector doesnt have to be normalized! So creating a special cube map which contains normalized vectors you can easily normalize a vector by passing it as a texture coordinate. See reference [4] how to calculate a normalization cube map.</p>
<p>So, now back to our Bump Mapping problem:</p>
<p><strong><span style="text-decoration: underline;">How Can We Use This Knowledge With OpenGL To Perform DP3 Bump Mapping?</span></strong></p>
<p>First a simple list what we need:</p>
<ul>
<li>A simple texture for the material texture (a smiley or whatever you want! :-)</li>
<li>A bump map texture (here we want the bump map to represent normalized normal vectors, where r is the x value, g is the y value and b is the z value of this vector. But these vectors are of course in a range from 0 to 1, not -1 to +1(x, y and z values are added to 1 and then divided by 2 to get the rgb values).</li>
<li>A normalized cube map (as explained before).</li>
</ul>
<p>&nbsp;</p>
<p>In this simple example we want to implement a simple version of the diffuse lighting equation (where . Is the dot product and * is a multiplication):</p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">result_color = (normalized_vector_from_surface_to_light . normal_of_the_surface) * material_texture
</pre>
<p>Assuming we have 4 texture units (GeForce 3 and up, Radeon 8500 and up) we can do the following:</p>
<pre class="brush: cpp; fontsize: 100; first-line: 1;">// Set The First Texture Unit To Normalize Our Vector From The Surface To The Light.
// Set The Texture Environment Of The First Texture Unit To Replace It With The
// Sampled Value Of The Normalization Cube Map.
glActiveTextureARB(GL_TEXTURE0);
glEnable(GL_TEXTURE_CUBE_MAP);
glBindTexture(GL_TEXTURE_CUBE_MAP, our_normalization_cube_map);
glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_REPLACE) ;
glTexEnvi(GL_TEXTURE_ENV, GL_SOURCE0_RGB, GL_TEXTURE) ;

// Set The Second Unit To The Bump Map.
// Set The Texture Environment Of The Second Texture Unit To Perform A Dot3
// Operation With The Value Of The Previous Texture Unit (The Normalized
// Vector Form The Surface To The Light) And The Sampled Texture Value (The
// Normalized Normal Vector Of Our Bump Map).
glActiveTextureARB(GL_TEXTURE1);
glEnable(GL_TEXTURE_2D);
glBindTexture(GL_TEXTURE_2D, our_bump_map);
glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_DOT3_RGB) ;
glTexEnvi(GL_TEXTURE_ENV, GL_SOURCE0_RGB, GL_PREVIOUS) ;
glTexEnvi(GL_TEXTURE_ENV, GL_SOURCE1_RGB, GL_TEXTURE) ;

// Set The Third Texture Unit To Our Texture.
// Set The Texture Environment Of The Third Texture Unit To Modulate
// (Multiply) The Result Of Our Dot3 Operation With The Texture Value.
glActiveTextureARB(GL_TEXTURE2);
glEnable(GL_TEXTURE_2D);
glBindTexture(GL_TEXTURE_2D, our_texture);
glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);

// Now We Draw Our Object (Remember That We First Have To Calculate The
// (UnNormalized) Vector From Each Vertex To Our Light).

float vertex_to_light_x, vertex_to_light_y, vertex_to_light_z;

glBegin(GL_QUADS);
for (unsigned int i = 0; i &lt; 4; i++)
	{
	vertex_to_light_x = light_x  current_vertex_x;
	vertex_to_light_y = light_y  current_vertex_y;
	vertex_to_light_z = light_z  current_vertex_z;

	// Passing The vector_to_light Values To Texture Unit 0.
	// Remember The First Texture Unit Is Our Normalization Cube Map
	// So This Vector Will Be Normalized For Dot 3 Bump Mapping.
	glMultiTexCoord3f(GL_TEXTURE0, vertex_to_light_y, vertex_to_light_y, vertex_to_light_x);
	// Passing The Simple Texture Coordinates To Texture Unit 1 And 2.
	glMultiTexCoord2f(GL_TEXTURE1, current_texcoord_s, current_texcoord_t);
	glMultiTexCoord2f(GL_TEXTURE2, current_texcoord_s, current_texcoord_t);

	glVertex3f(current_vertex_x, current_vertex_y, current_vertex_z) ;
	}
glEnd();
</pre>
<p>So, thats all for creating a simple bump mapped surface.</p>
<p>But thats not the end! We might run into big problems in this example. Here we assume that the quad we draw is parallel to the x/y plane. Remember that the normals we stored in a texture are in a static coordinate space. In the example above (if the quad we draw is paralled to the x/y plane) the coordinate space of our object is equal to the coordinate space of the normals. Imagine that we rotate the quad around the x axis. Now the z axis of the normals also has to be rotated. We didnt pay respect to this. But theres a very simple solution for this problem:</p>
<p><strong><span style="text-decoration: underline;">Tangent Space Bump Mapping</span></strong></p>
<p>In Tangent Space Bump Mapping we define a new coordinate system, the tangent space. This tangent space is different from vertex to vertex. We use 3 vectors to represent this tangentspace: the normal (the z axis of our tangent space), the tangent (the x axis of our tangent space) and the binormal (the y axis of our tangent space). Theres a nice picture at reference [4]. You can easily calculate these vector from the geometry date (vertex and texture coordinates) (see reference [5] for details). With these 3 vectors we can build a matrix which transforms a vector from object space to our tangent space. In the example above the tangent is (1,0,0) and the binormal is (0,1,0) and the normal is (0,0,1), so our matrix will be:</p>
<pre>( 1,0,0 )
( 0,1,0 )
( 0,0,1 )
</pre>
<p>And this is an identity matrix so there is no need to use tangent space bump mapping.</p>
<p>And thats it!</p>
<p>Of course you can use vertex programs for performing the multiplication to tangent space and/or for calculation the vector from each vertex to the light.</p>
<p>Thanks for reading!<br /> Questions and Feedback is welcome! :-)<br /> <a href="mailto:corrail@gmx.at"><strong>Florian Rudolf</strong></a><br /> ICQ# 59184081</p>
<p>"If you want to contact my please make sure that it doesn't look like spam! I get a lot of spam mail/ICQ requests... Everything suspicious will be deleted"</p>
<p><strong><span style="text-decoration: underline;">Demo:</span></strong></p>
<p><a href="javascript:if(confirm('http://nehe.gamedev.net/_admin/article/edit/25006/extras/article20/bump_mapping.zip  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a path excluded by the site\'s Robot Exclusion parameters.  (Teleport Pro\'s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?'))window.location='http://nehe.gamedev.net/_admin/article/edit/25006/extras/article20/bump_mapping.zip'" tppabs="http://nehe.gamedev.net/_admin/article/edit/25006/extras/article20/bump_mapping.zip">Bump Mapping Demo For This Article</a></p>
<p><strong><span style="text-decoration: underline;">References:</span></strong></p>
<p>[1] - Real-Time Rendering by Eric Haines and Tomas Akenine-M&ouml;ller (ISBN 1-56881-182-9)<br /> [2] - OpenGL Specification <a href="javascript:if(confirm('ftp://ftp.sgi.com/opengl/doc/opengl1.2/opengl1.2.1.pdf  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='ftp://ftp.sgi.com/opengl/doc/opengl1.2/opengl1.2.1.pdf'" tppabs="ftp://ftp.sgi.com/opengl/doc/opengl1.2/opengl1.2.1.pdf" target="_blank">ftp://ftp.sgi.com/opengl/doc/opengl1.2/opengl1.2.1.pdf</a><br /> [3] - OpenGL Extension Registry <a href="javascript:if(confirm('http://oss.sgi.com/projects/ogl-sample/registry  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://oss.sgi.com/projects/ogl-sample/registry'" tppabs="http://oss.sgi.com/projects/ogl-sample/registry" target="_blank">http://oss.sgi.com/projects/ogl-sample/registry</a><br /> [4] - <a href="javascript:if(confirm('http://www.paulsprojects.net/tutorials/simplebump/simplebump.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.paulsprojects.net/tutorials/simplebump/simplebump.html'" tppabs="http://www.paulsprojects.net/tutorials/simplebump/simplebump.html" target="_blank">http://www.paulsprojects.net/tutorials/simplebump/simplebump.html</a></p>
            </div>
            <div>
            	<p>
            		<strong><a href="index-125.htm" tppabs="http://nehe.gamedev.net/article/bump_mapping/25006/">CONTINUE READING</a></strong>
            	</p>
            </div>
        </div>        
    
    <div>
    	<div style="text-align: center; width: 150px; float: left;"><a href="index-29.htm" tppabs="http://nehe.gamedev.net/article_index/3/">Newer Posts</a></div>
    	<div style="text-align: center; width: 150px; float:right;"><a href="index-126.htm" tppabs="http://nehe.gamedev.net/article_index/5/">Older Posts</a></div>
    	<div style="clear:both;"></div>
    </div>
</div>


            <div style="width:728px;padding:0px;margin:auto; margin-top: 10px;">
            
                <!-- Leaderboard_NeHe -->
                <div id='div-gpt-ad-1327940144417-0' style='width:728px; height:90px;'>
                <script type='text/javascript'>
                googletag.cmd.push(function() { googletag.display('div-gpt-ad-1327940144417-0'); });
                </script>
                </div>
                                       
            </div>   
        </td>
        <td class="col2">
            
			<div style="text-align: center; padding:10px;">
                <!-- Skyscraper_NeHe -->
                <div id='div-gpt-ad-1327940144417-1' style="width:160px; height:600px; margin:auto;">
                <script type='text/javascript'>
                googletag.cmd.push(function() { googletag.display('div-gpt-ad-1327940144417-1'); });
                </script>
                </div>
			</div>
                        
        </td>
    </table>
    <div id="footer">
        <p>
            
			© 1997-2012 <a href="javascript:if(confirm('http://www.gamedev.net/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.gamedev.net/'" tppabs="http://www.gamedev.net/">Gamedev.net</a>. All rights reserved.<br/>
			
			NeHe™ and NeHe Productions™ are trademarks of GameDev.net, LLC<br/>
			OpenGL® is a registered trademark of Silicon Graphics Inc.<br/>
		</p>        
		<br/>
    </div>

    
	    <script type="text/javascript" src="shCore.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shCore.js"></script>
        <script type="text/javascript" src="shBrushCpp.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shBrushCpp.js"></script>
	    <script type="text/javascript" src="shBrushJScript.js" tppabs="http://nehe.gamedev.net/static/js/syntax_highlighter/shBrushJScript.js"></script>
	    <script type="text/javascript">SyntaxHighlighter.all();</script>
    
    
<!-- GoogleAnalytics code -->
<script src="urchin.js" tppabs="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-279474-2"; // Gamedev
urchinTracker();
_uff = 0; // Reset for second account
_uacct = "UA-24180731-1"; // Non-GD
urchinTracker();
</script> 
  </body>
</html>
