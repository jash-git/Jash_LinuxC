<!DOCTYPE html> 
<html lang="en">
<head>
<title>Device contexts in wxWidgets</title>
<link rel="stylesheet" href="format.css" tppabs="http://zetcode.com/cfg/format.css">
<meta charset="utf-8">
<meta name="keywords" content="wxWidgets, tutorial, First programs, C++, programming, 
GUI, Device Contexts, multiplatform">
<meta name="description" content="This part of the wxWidgets tutorial covers device contexts.">
<meta name="author" content="Jan Bodnar">

<script src="jquery.js" tppabs="http://zetcode.com/lib/jquery.js"></script>
<script src="common.js" tppabs="http://zetcode.com/lib/common.js"></script>

</head>

<body>

<div class="container">

<div id="wide_ad" class="ltow">
<script async src="adsbygoogle.js" tppabs="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 160x600, August 2011 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9706709751191532"
     data-ad-slot="2484182563"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>


<div class="content">


<header>

<a href="javascript:if(confirm('http://zetcode.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://zetcode.com/'" tppabs="http://zetcode.com/" title="Home">Home</a>&#160;
<a href=".-10.htm" tppabs="http://zetcode.com/gui/wxwidgets/gdi/..">Contents</a>

</header>


<h1>Device Contexts in wxWidgets</h1>


<p>
The <em>GDI</em> (<code>Graphics Device Interface</code>) is an interface for working 
with graphics. It is used to interact with graphic devices such as monitor, 
printer or a file. The GDI allows programmers to display data on a screen or 
printer without having to be concerned about the details of a particular device. 
The GDI insulates the programmer from the hardware. 
</p>


<img src="gdi.png" tppabs="http://zetcode.com/img/gui/wxwidgets/gdi.png" alt="The GDI">
<div class="figure">Figure: The GDI structure</div>

<p>
From the programmer's point of view, the GDI is a group of classes and methods 
for working with graphics. The GDI consists of 2D Vector Graphics, Fonts, and Images.
</p>

<div class="med_rec">
<script async src="adsbygoogle.js" tppabs="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- NewSquare -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:250px"
     data-ad-client="ca-pub-9706709751191532"
     data-ad-slot="0364418177"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

<p>
To begin drawing graphics, we must create a device context (DC) object. In 
wxWidgets the device context is called <code>wxDC</code>. The documentation 
defines <code>wxDC</code> as a device context onto which which graphics and 
text can be drawn. It represents number of devices in a generic way. Same 
piece of code can write to different kinds of devices. Be it a screen or a 
printer. The <code>wxDC</code> is not intended to be used directly. Instead 
a programmer should choose one of the derived classes. 
Each derived class is intended to be used under specific conditions.
</p>

<p>
The following classes are derived <code>wxDC</code> classes:
</p>

<ul>
	<li><code>wxBufferedDC</code></li>
	<li><code>wxBufferedPaintDC</code></li>
	<li><code>wxPostScriptDC</code></li>
	<li><code>wxMemoryDC</code></li>
	<li><code>wxPrinterDC</code></li>
	<li><code>wxScreenDC</code></li>
	<li><code>wxClientDC</code></li>
	<li><code>wxPaintDC</code></li>
	<li><code>wxWindowDC</code></li>
</ul>

<p>
The <code>wxScreenDC</code> is used to draw anywhere on the screen. The <code>wxWindowDC</code> is 
used if we want to paint on the whole window (Windows only). This includes 
window decorations. The <code>wxClientDC</code> is used to draw on the client area of a 
window. The client area is the area of a window without its decorations 
(title and border). The <code>wxPaintDC</code> is used to draw on the client area as well. 
But there is one difference between the <code>wxPaintDC</code> and the <code>wxClientDC</code>. 
The <code>wxPaintDC</code> should be used only from a wxPaintEvent. The <code>wxClientDC</code> 
should not be used from a <code>wxPaintEvent</code>. The <code>wxMemoryDC</code> is used to draw 
graphics on the bitmap. The <code>wxPostScriptDC</code> is used to write to PostScript 
files on any platform. The <code>wxPrinterDC</code> is used to access a printer 
(Windows only). 
</p>


<h4>Simple line</h4>

<p>
We begin with drawing a line.
</p>

<div class="codehead">line.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Line : public wxFrame
{
public:
    Line(const wxString&amp; title);

    void OnPaint(wxPaintEvent&amp; event);

};
</pre>

<div class="codehead">line.cpp</div>
<pre class="code">
#include "line.h"


Line::Line(const wxString&amp; title)
       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(280, 180))
{
  this->Connect(wxEVT_PAINT, wxPaintEventHandler(Line::OnPaint));
  this->Centre();
}

void Line::OnPaint(wxPaintEvent&amp; event)
{
  wxPaintDC dc(this);
  
  wxCoord x1 = 50, y1 = 60;
  wxCoord x2 = 190, y2 = 60;

  dc.DrawLine(x1, y1, x2, y2);
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "line.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    Line *line = new Line(wxT("Line"));
    line->Show(true);

    return true;
}
</pre>

<p>
In our example, we draw a simple line onto the client area of the window. 
If we resize the window, it is redrawn. 
An <code>wxPaintEvent</code> is generated. And the line is drawn again. 
</p>

<pre class="explanation">
void OnPaint(wxPaintEvent&amp; event);
</pre>

<p>
Here we declare a <code>OnPaint()</code> event handler function. 
</p>

<pre class="explanation">
this->Connect(wxEVT_PAINT, wxPaintEventHandler(Line::OnPaint));
</pre>

<p>
We connect a paint event to the <code>OnPaint()</code> method. All the drawing 
happens inside the <code>OnPaint()</code> event handler.
</p>

<pre class="explanation">
wxPaintDC dc(this);
</pre>

<p>
We define a <code>wxPaintDC</code> device context. It is a device context, 
that is used to draw on the window inside the
<code>wxPaintEvent</code>
</p>

<pre class="explanation">
wxCoord x1 = 50, y1 = 60;
wxCoord x2 = 190, y2 = 60;
</pre>

<p>
We define four coordinates.
</p>

<pre class="explanation">
dc.DrawLine(x1, y1, x2, y2);
</pre>

<p>
We draw a simple line calling the <code>DrawLine()</code> method.
</p>

<img src="line.png" tppabs="http://zetcode.com/img/gui/wxwidgets/line.png" alt="Line">
<div class="figure">Figure: A simple line</div>


<h2>Drawing text</h2>

<p>
Drawing some text on the window is easy.
</p>

<div class="codehead">text.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Text : public wxFrame
{
public:
    Text(const wxString &amp; title);

    void OnPaint(wxPaintEvent &amp; event);

};
</pre>

<div class="codehead">text.cpp</div>
<pre class="code">
#include "text.h"


Text::Text(const wxString&amp; title)
       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(250, 150))
{
  Connect(wxEVT_PAINT, wxPaintEventHandler(Text::OnPaint));
  Centre();
}

void Text::OnPaint(wxPaintEvent&amp; event)
{
  wxPaintDC dc(this);

  dc.DrawText(wxT("Лев Николaевич Толстoй"), 40, 60);
  dc.DrawText(wxT("Анна Каренина"), 70, 80);
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};

</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "text.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    Text *text = new Text(wxT("Text"));
    text->Show(true);

    return true;
}
</pre>


<p>
In our example, we draw text Lev Nikolayevich Tolstoy, Anna Karenina in 
Russian azbuka onto the window.
</p>

<pre class="explanation">
dc.DrawText(wxT("Лев Николaевич Толстoй"), 40, 60);
dc.DrawText(wxT("Анна Каренина"), 70, 80);
</pre>

<p>
The <code>DrawText()</code> method draws text on the window. It Draws a text 
string at the specified point, using the current text font, and the 
current text foreground and background colours. Thanks to the 
<code>wxT()</code> macro, we can use azbuka directly in the
code. The <code>wxT()</code> macro is identical to <code>_T()</code> macro. 
It wraps string literals for use with or without Unicode. When
Unicode is not enabled, <code>wxT()</code> is an empty macro. When Unicode is 
enabled, it adds the necessary L for the string literal to become a 
wide character string constant.
</p>


<img src="text.jpg" tppabs="http://zetcode.com/img/gui/wxwidgets/text.jpg" alt="Drawing text">
<div class="figure">Figure: Drawing text</div>


<h4>Point</h4>

<p>
The simplest geometrical object is a point. It is a plain dot on the window.
</p>

<pre class="definition">
DrawPoint(int x, int y)
</pre>

<p>
This method draws a point at x, y coordinates. 
</p>

<div class="codehead">point.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Points : public wxFrame
{
public:
    Points(const wxString &amp; title);

    void OnPaint(wxPaintEvent &amp; event);

};
</pre>

<div class="codehead">points.cpp</div>
<pre class="code">
#include "points.h"
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;


Points::Points(const wxString&amp; title)
       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(280, 180))
{

  this->Connect(wxEVT_PAINT, wxPaintEventHandler(Points::OnPaint));
  srand(time(NULL));
  this->Centre();
}

void Points::OnPaint(wxPaintEvent &amp; event)
{
  wxPaintDC dc(this);
  
  wxCoord x = 0;
  wxCoord y = 0;

  wxSize size = this->GetSize();

  for (int i = 0; i&lt;1000; i++) {
      x = rand() % size.x + 1;
      y = rand() % size.y + 1;
      dc.DrawPoint(x, y);
  }
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "points.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    Points *points = new Points(wxT("Points"));
    points->Show(true);

    return true;
}
</pre>


<p>
A single point might be difficult to see. So we create 1000 points. Each 
time the window is resized, we draw 
the 1000 points over the client area of the window.
</p>

<pre class="explanation">
wxSize size = this->GetSize();
</pre>

<p>
Here we get the size of the window. 
</p>

<pre class="explanation">
x = rand() % size.x + 1;
</pre>

<p>
Here we get a random number in the range of 1 to <code>size.x</code>.
</p>


<img src="points.png" tppabs="http://zetcode.com/img/gui/wxwidgets/points.png" alt="Points">
<div class="figure">Figure: Points</div>


<h2>Pen</h2>

<p>
Pen is an elementary graphics object. It is used to draw lines, curves and outlines 
of rectangles, ellipses, polygons, or other shapes.
</p>


<pre class="definition">
 wxPen(const wxColour&amp; colour, int width = 1, int style = wxSOLID)
</pre>


<p>
The <code>wxPen</code> constructor has three parameters: the colour, width and style. 
The following is a list of possible pen styles:
</p>

<ul>
	<li><code>wxSOLID</code></li>
	<li><code>wxDOT</code></li>
	<li><code>wxLONG_DASH</code></li>
	<li><code>wxSHORT_DASH</code></li>
	<li><code>wxDOT_DASH</code></li>
	<li><code>wxTRANSPARENT</code></li>
</ul>


<div class="codehead">pen.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Pen : public wxFrame
{
public:
    Pen(const wxString&amp; title);

    void OnPaint(wxPaintEvent&amp; event);

};
</pre>

<div class="codehead">pen.cpp</div>
<pre class="code">
#include "pen.h"


Pen::Pen(const wxString&amp; title)
       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(360, 180))
{
  this->Connect(wxEVT_PAINT, wxPaintEventHandler(Pen::OnPaint));
  this->Centre();
}

void Pen::OnPaint(wxPaintEvent&amp; event)
{
  wxPaintDC dc(this);

  wxColour col1, col2;

  col1.Set(wxT("#0c0c0c"));
  col2.Set(wxT("#000000"));

  wxBrush brush(wxColour(255, 255, 255), wxTRANSPARENT);
  dc.SetBrush(brush);

  dc.SetPen(wxPen(col1, 1, wxSOLID));
  dc.DrawRectangle(10, 15, 90, 60);

  dc.SetPen(wxPen(col1, 1, wxDOT));
  dc.DrawRectangle(130, 15, 90, 60);

  dc.SetPen(wxPen(col1, 1, wxLONG_DASH));
  dc.DrawRectangle(250, 15, 90, 60);

  dc.SetPen(wxPen(col1, 1, wxSHORT_DASH));
  dc.DrawRectangle(10, 105, 90, 60);

  dc.SetPen(wxPen(col1, 1, wxDOT_DASH));
  dc.DrawRectangle(130, 105, 90, 60);

  dc.SetPen(wxPen(col1, 1, wxTRANSPARENT));
  dc.DrawRectangle(250, 105, 90, 60);
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "pen.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{
  Pen *pen = new Pen(wxT("Pen"));
  pen->Show(true);

  return true;
}

</pre>

<p>
In our example, we draw 6 rectangles with different pen styles. 
The last one is transparent, not visible. 
</p>

<pre class="explanation">
dc.SetPen(wxPen(col1, 1, wxSOLID));
dc.DrawRectangle(10, 15, 90, 60);
</pre>

<p>
Here we define a pen for our first rectangle. We set a pen with color 
<code>col1</code> (#0c0c0c), 1 pixel wide, solid. 
The <code>DrawRectangle()</code> method draws the rectangle.
</p>


<img src="pen.png" tppabs="http://zetcode.com/img/gui/wxwidgets/pen.png" alt="Pen">
<div class="figure">Figure: Pen</div>


<h2>Regions</h2>

<p>
Regions can be combined to create more complex shapes. We can use four set 
operations: <code>Union()</code>, <code>Intersect()</code>, <code>Substract()</code> 
and <code>Xor()</code>. The following example shows all four operations in action. 
</p>

<div class="codehead">Regions.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Regions : public wxFrame
{
public:
  Regions(const wxString &amp; title);

  void OnPaint(wxPaintEvent &amp; event);

};
</pre>


<div class="codehead">Regions.cpp</div>
<pre class="code">
#include "Regions.h"


Regions::Regions(const wxString&amp; title)
       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(270, 220))
{
  this->Connect(wxEVT_PAINT, wxPaintEventHandler(Regions::OnPaint));
  this->Centre();
}

void Regions::OnPaint(wxPaintEvent &amp; event)
{
  wxPaintDC dc(this);
  wxColour gray, white, red, blue;
  wxColour orange, green, brown;

  gray.Set(wxT("#d4d4d4"));
  white.Set(wxT("#ffffff"));
  red.Set(wxT("#ff0000"));
  orange.Set(wxT("#fa8e00"));
  green.Set(wxT("#619e1b"));
  brown.Set(wxT("#715b33"));
  blue.Set(wxT("#0d0060"));
 
  dc.SetPen(wxPen(gray));

  dc.DrawRectangle(20, 20, 50, 50);
  dc.DrawRectangle(30, 40, 50, 50);

  dc.SetBrush(wxBrush(white));
  dc.DrawRectangle(100, 20, 50, 50);
  dc.DrawRectangle(110, 40, 50, 50); 
  wxRegion region1(100, 20, 50, 50);
  wxRegion region2(110, 40, 50, 50);
  region1.Intersect(region2);
  wxRect rect1 = region1.GetBox();
  dc.SetClippingRegion(region1);
  dc.SetBrush(wxBrush(red));
  dc.DrawRectangle(rect1);
  dc.DestroyClippingRegion();

  dc.SetBrush(wxBrush(white));
  dc.DrawRectangle(180, 20, 50, 50);
  dc.DrawRectangle(190, 40, 50, 50);
  wxRegion region3(180, 20, 50, 50);
  wxRegion region4(190, 40, 50, 50);
  region3.Union(region4);
  dc.SetClippingRegion(region3);
  wxRect rect2 = region3.GetBox();
  dc.SetBrush(wxBrush(orange));
  dc.DrawRectangle(rect2);
  dc.DestroyClippingRegion();

  dc.SetBrush(wxBrush(white));
  dc.DrawRectangle(20, 120, 50, 50);
  dc.DrawRectangle(30, 140, 50, 50);
  wxRegion region5(20, 120, 50, 50);
  wxRegion region6(30, 140, 50, 50);
  region5.Xor(region6);
  wxRect rect3 = region5.GetBox();
  dc.SetClippingRegion(region5);
  dc.SetBrush(wxBrush(green));
  dc.DrawRectangle(rect3);
  dc.DestroyClippingRegion();

  dc.SetBrush(wxBrush(white));
  dc.DrawRectangle(100, 120, 50, 50);
  dc.DrawRectangle(110, 140, 50, 50);
  wxRegion region7(100, 120, 50, 50);
  wxRegion region8(110, 140, 50, 50);
  region7.Subtract(region8);
  wxRect rect4 = region7.GetBox();
  dc.SetClippingRegion(region7);
  dc.SetBrush(wxBrush(brown));
  dc.DrawRectangle(rect4);
  dc.DestroyClippingRegion();

  dc.SetBrush(white);
  dc.DrawRectangle(180, 120, 50, 50);
  dc.DrawRectangle(190, 140, 50, 50);
  wxRegion region9(180, 120, 50, 50);
  wxRegion region10(190, 140, 50, 50);
  region10.Subtract(region9);
  wxRect rect5 = region10.GetBox();
  dc.SetClippingRegion(region10);
  dc.SetBrush(wxBrush(blue));
  dc.DrawRectangle(rect5);
  dc.DestroyClippingRegion(); 
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "Regions.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{
  Regions *regions = new Regions(wxT("Regions"));
  regions->Show(true);

  return true;
}
</pre>

<img src="regions.png" tppabs="http://zetcode.com/img/gui/wxwidgets/regions.png" alt="Regions">
<div class="figure">Figure: Regions</div>


<h2>Gradient</h2>

<p>
In computer graphics, gradient is a smooth blending of shades from light to 
dark or from one color to another. In 2D drawing programs and paint programs, 
gradients are used to create colorful backgrounds and special effects as well 
as to simulate lights and shadows. (answers.com)
</p>

<pre class="definition">
void GradientFillLinear(const wxRect&amp; rect, const wxColour&amp; initialColour, 
     const wxColour&amp; destColour, wxDirection nDirection = wxEAST)
</pre>

<p>
This method fills the area specified by a rect with a linear gradient, starting 
from <code>initialColour</code> and eventually fading to <code>destColour</code>. 
The <code>nDirection</code> parameter 
specifies the direction of the colour change, the default value is <code>wxEAST</code>. 
</p>

<div class="codehead">gradient.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Gradient : public wxFrame
{
public:
  Gradient(const wxString&amp; title);

  void OnPaint(wxPaintEvent&amp; event);

};
</pre>


<div class="codehead">gradient.cpp</div>
<pre class="code">
#include "gradient.h"


Gradient::Gradient(const wxString&amp; title)
       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(220, 260))
{
  this->Connect(wxEVT_PAINT, wxPaintEventHandler(Gradient::OnPaint));
  this->Centre();
}

void Gradient::OnPaint(wxPaintEvent&amp; event)
{
  wxPaintDC dc(this);


  wxColour col1, col2;

  col1.Set(wxT("#e12223"));
  col2.Set(wxT("#000000"));

  dc.GradientFillLinear(wxRect(20, 20, 180, 40), col1, col2, wxNORTH);
  dc.GradientFillLinear(wxRect(20, 80, 180, 40), col1, col2, wxSOUTH);
  dc.GradientFillLinear(wxRect(20, 140, 180, 40), col1, col2, wxEAST);
  dc.GradientFillLinear(wxRect(20, 200, 180, 40), col1, col2, wxWEST);  
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "gradient.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{
  Gradient *grad = new Gradient(wxT("Gradient"));
  grad->Show(true);

  return true;
}
</pre>

<img src="gradient.png" tppabs="http://zetcode.com/img/gui/wxwidgets/gradient.png" alt="Gradient">
<div class="figure">Figure: Gradient</div>


<h2>Shapes</h2>

<p>
Shapes are more sophisticated geometrical objects. We will draw various 
geometrical shapes in the following example.
</p>

<div class="codehead">shapes.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Shapes : public wxFrame
{
public:
    Shapes(const wxString &amp; title);

    void OnPaint(wxPaintEvent &amp; event);

};
</pre>

<div class="codehead">shapes.cpp</div>
<pre class="code">
#include "shapes.h"


Shapes::Shapes(const wxString&amp; title)
       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(350, 300))
{
  this->Connect(wxEVT_PAINT, wxPaintEventHandler(Shapes::OnPaint));
  this->Centre();
}

void Shapes::OnPaint(wxPaintEvent&amp; event)
{
  wxPaintDC dc(this);
 
  wxPoint lines[] = { wxPoint(20, 260), wxPoint(100, 260), 
          wxPoint(20, 210), wxPoint(100, 210) };
  wxPoint polygon[] = { wxPoint(130, 140), wxPoint(180, 170), 
          wxPoint(180, 140), wxPoint(220, 110), wxPoint(140, 100) };
  wxPoint splines[] = { wxPoint(240, 170), wxPoint(280, 170), 
          wxPoint(285, 110), wxPoint(325, 110) };
  
  dc.DrawEllipse(20, 20, 90, 60);
  dc.DrawRoundedRectangle(130, 20, 90, 60, 10);
  dc.DrawArc(240, 40, 340, 40, 290, 20);

  dc.DrawPolygon(4, polygon);
  dc.DrawRectangle(20, 120, 80, 50);
  dc.DrawSpline(4, splines);

  dc.DrawLines(4, lines);
  dc.DrawCircle(170, 230, 35);
  dc.DrawRectangle(250, 200, 60, 60);
  
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>


<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "shapes.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    Shapes *shapes = new Shapes(wxT("Shapes"));
    shapes->Show(true);

    return true;
}
</pre>


<img src="shapes.png" tppabs="http://zetcode.com/img/gui/wxwidgets/shapes.png" alt="Shapes">
<div class="figure">Figure: Shapes</div>

<p>
In this chapter, we covered GDI in wxWidgets. 
</p>

<div class="hor">
<script async src="adsbygoogle.js" tppabs="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- horizontal -->
<ins class="adsbygoogle"
     style="display:inline-block;width:468px;height:60px"
     data-ad-client="ca-pub-9706709751191532"
     data-ad-slot="1734478269"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

<footer>

<div class="botNav center">
<span class="botNavItem"><a href="javascript:if(confirm('http://zetcode.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://zetcode.com/'" tppabs="http://zetcode.com/">Home</a></span> ‡ <span class="botNavItem"><a href=".-10.htm" tppabs="http://zetcode.com/gui/wxwidgets/gdi/..">Contents</a></span> ‡
<span class="botNavItem"><a href="#">Top of Page</a></span>
</div>

<div class="signature">

<a href="javascript:if(confirm('http://zetcode.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://zetcode.com/'" tppabs="http://zetcode.com/">ZetCode</a>  last modified October 13, 2014  <span class="copyright">&copy; 2007 - 2014 Jan Bodnar</span>
</div>

</footer>

</div> <!-- content -->

</div> <!-- container -->

</body>
</html>
