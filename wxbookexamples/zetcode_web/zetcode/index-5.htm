<!DOCTYPE html> 
<html lang="en">
<head>
<title>Layout management in wxWidgets</title>
<link rel="stylesheet" href="format.css" tppabs="http://zetcode.com/cfg/format.css">
<meta charset="utf-8">
<meta name="keywords" content="wxWidgets, tutorial, widgets, layout C++, programming, GUI, multiplatform">
<meta name="description" content="This part of the wxWidgets tutorial covers layout management.">
<meta name="author" content="Jan Bodnar">

<script src="jquery.js" tppabs="http://zetcode.com/lib/jquery.js"></script>
<script src="common.js" tppabs="http://zetcode.com/lib/common.js"></script>

</head>

<body>

<div class="container">

<div id="wide_ad" class="ltow">
<script async src="adsbygoogle.js" tppabs="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 160x600, August 2011 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9706709751191532"
     data-ad-slot="2484182563"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

<div class="content">


<header>

<a href="javascript:if(confirm('http://zetcode.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://zetcode.com/'" tppabs="http://zetcode.com/" title="Home">Home</a>&#160;
<a href=".-4.htm" tppabs="http://zetcode.com/gui/wxwidgets/layoutmanagement/..">Contents</a>

</header>


<h1>Layout management in wxWidgets</h1>


<p>
A typical application consists of various widgets. Those widgets are 
placed inside container widgets. A programmer must manage the layout 
of the application. This is not an easy task. 
</p>

<p>
In wxWidgets we have two options:
</p>

<ul>
	<li>Absolute positioning.</li>
	<li>Sizers.</li>
</ul>


<h2>Absolute Positioning</h2>

<p>
The programmer specifies the position and the size of each widget in pixels. 
When we use absolute positioning, we have to understand several things: 
</p>

<ul>
	<li>The size and the position of a widget do not change if we resize a window.</li>
	<li>Applications look different (often poorly) on various platforms.</li>
	<li>Changing fonts in our application might spoil the layout.</li>
	<li>If we decide to change our layout, we must completely redo your 
	layout, which is tedious and time consuming.</li>
</ul>

<p>
There might be situations, where we can possibly use absolute positioning,  
for example, in simple tutorials. We do not want to make the examples too difficult, 
so we often use absolute positioning to explain a certain topic. 
But mostly, in real world programs, programmers use sizers.
</p>

<div class="med_rec">
<script async src="adsbygoogle.js" tppabs="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- NewSquare -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:250px"
     data-ad-client="ca-pub-9706709751191532"
     data-ad-slot="0364418177"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

<p>
In our example we have a simple skeleton of a text editor. If we resize 
the window, the size of out <code>wxTextCtrl</code> does not change as 
we would expect.
</p>

<img src="absolute1.jpg" tppabs="http://zetcode.com/img/gui/wxwidgets/absolute1.jpg" alt="Before resizement"> 
<div class="figure">
Figure: Before resizement
</div>

<img src="absolute2.jpg" tppabs="http://zetcode.com/img/gui/wxwidgets/absolute2.jpg" alt="After resizement">
<div class="figure">
Figure: After resizement
</div>

<div class="codehead">absolute.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Absolute : public wxFrame
{
public:
  Absolute(const wxString&amp; title);

  wxMenuBar *menubar;
  wxMenu *file;
  wxMenu *edit;
  wxMenu *help;
  wxTextCtrl *textctrl;

};
</pre>

<div class="codehead">absolute.cpp</div>
<pre class="code">
#include "absolute.h"


Absolute::Absolute(const wxString&amp; title)
       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(250, 180))
{
 
 wxPanel *panel = new wxPanel(this, -1);

 menubar = new wxMenuBar;
 file = new wxMenu;
 edit = new wxMenu;
 help = new wxMenu;

 menubar->Append(file, wxT("&amp;File"));
 menubar->Append(edit, wxT("&amp;Edit"));
 menubar->Append(help, wxT("&amp;Help"));
 SetMenuBar(menubar);

 textctrl = new wxTextCtrl(panel, -1, wxT(""), wxPoint(-1, -1),
     wxSize(250, 150));

 Centre();
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "absolute.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    Absolute *absolute = new Absolute(wxT("Absolute"));
    absolute->Show(true);

    return true;
}
</pre>

<p>
This is an example, where we use absolute positioning. We position a 
<code>wxTextCtrl</code> widget on a panel widget.
</p>

<pre class="explanation">
textctrl = new wxTextCtrl(panel, -1, wxT(""), wxPoint(-1, -1),
   wxSize(250, 150));
</pre>

<p>
We do the absolute positioning in the constructor of the <code>wxTextCtrl</code> widget. 
In our case, we provide the default position for the widget. The width is 250px and 
the height 150px.
</p>


<h2>Using sizers</h2>

<p>
Sizers in wxWidgets do address all those issues, we mentioned by absolute 
positioning. We can choose among these sizers.
</p>

<ul>
	<li><code>wxBoxSizer</code></li>
	<li><code>wxStaticBoxSizer</code></li>
	<li><code>wxGridSizer</code></li>
	<li><code>wxFlexGridSizer</code></li>
	<li><code>wxGridBagSizer</code></li>
</ul>

<img src="sizer1.jpg" tppabs="http://zetcode.com/img/gui/wxwidgets/sizer1.jpg" alt="Before resizement"> 
<div class="figure">
Figure: Before resizement
</div>

<img src="sizer2.jpg" tppabs="http://zetcode.com/img/gui/wxwidgets/sizer2.jpg" alt="After resizement">
<div class="figure">
Figure: After resizement
</div>


<div class="codehead">sizer.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Sizer : public wxFrame
{
public:
  Sizer(const wxString&amp; title);

  wxMenuBar *menubar;
  wxMenu *file;
  wxMenu *edit;
  wxMenu *help;
  wxTextCtrl *textctrl;

};
</pre>

<div class="codehead">sizer.cpp</div>
<pre class="code">
#include "sizer.h"

Sizer::Sizer(const wxString&amp; title)
       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(250, 180))
{

 menubar = new wxMenuBar;
 file = new wxMenu;
 edit = new wxMenu;
 help = new wxMenu;

 menubar->Append(file, wxT("&amp;File"));
 menubar->Append(edit, wxT("&amp;Edit"));
 menubar->Append(help, wxT("&amp;Help"));
 SetMenuBar(menubar);

 textctrl = new wxTextCtrl(this, -1, wxT(""), wxPoint(-1, -1),
     wxSize(250, 150));
    
 Centre();
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "sizer.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    Sizer *sizer = new Sizer(wxT("Sizer"));
    sizer->Show(true);

    return true;
}
</pre>

<p>
The <code>wxTextCtrl</code> is placed inside the <code>wxFrame</code> widget. 
The <code>wxFrame</code> widget has a special built-in sizer. 
We can put only one widget inside the <code>wxFrame</code> container. The child widget 
occupies all the space, which is not given to the borders, menu, toolbar, 
and the statusbar.
</p>


<h2>wxBoxSizer</h2>

<p>
This sizer enables us to put several widgets into a row or a column. We can 
put another sizer into an existing sizer. This way we can create very 
complex layouts. 
</p>

<pre class="constructor">
wxBoxSizer(int orient)
wxSizerItem* Add(wxWindow* window, int proportion = 0, int flag = 0, int border = 0)
</pre>

<p>
The orientation can be <code>wxVERTICAL</code> or <code>wxHORIZONTAL</code>. Adding 
widgets into the <code>wxBoxSizer</code> is done via the <code>Add()</code> method. 
In order to understand it, we need to look at its parameters.
</p>

<p>
The proportion parameter defines the ratio of how will the widgets change in 
the defined orientation. Let's assume we have tree buttons with the proportions 
0, 1, and 2. They are added into a horizontal <code>wxBoxSizer</code>. Button 
with proportion 0 will not change at all. Button with proportion 2 will change 
twice more than the one with proportion 1 in the horizontal dimension.
</p>

<p>
With the flag parameter you can further configure the behaviour of the widgets 
within a <code>wxBoxSizer</code>. We can control the border between the widgets. 
We add some space between widgets in pixels. In order to apply border we need to 
define sides, where the border will be used. We can combine them with the 
<code>|</code> operator, e.g <code>wxLEFT | wxBOTTOM</code>. We can choose between 
these flags:
</p>

<ul>
<li><code>wxLEFT</code></li>
<li><code>wxRIGHT</code></li>
<li><code>wxBOTTOM</code></li>
<li><code>wxTOP</code></li>
<li><code>wxALL</code></li>
</ul>


<img src="border.png" tppabs="http://zetcode.com/img/gui/wxwidgets/border.png" alt="border around a panel">
<div class="figure">
Figure: border around a panel
</div>

<div class="codehead">border.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Border : public wxFrame
{
public:
  Border(const wxString&amp; title);

};
</pre>

<div class="codehead">border.cpp</div>
<pre class="code">
#include "border.h"

Border::Border(const wxString&amp; title)
       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(250, 200))
{
  wxColour col1, col2;
  col1.Set(wxT("#4f5049"));
  col2.Set(wxT("#ededed"));

  wxPanel *panel = new wxPanel(this, -1);
  panel->SetBackgroundColour(col1);
  wxBoxSizer *vbox = new wxBoxSizer(wxVERTICAL);

  wxPanel *midPan = new wxPanel(panel, wxID_ANY);
  midPan->SetBackgroundColour(col2);

  vbox->Add(midPan, 1, wxEXPAND | wxALL, 20);
  panel->SetSizer(vbox);

  Centre();
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "border.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    Border *border = new Border(wxT("Border"));
    border->Show(true);

    return true;
}
</pre>

<p>
In this example, we create two panels. The second panel has some 
space around itself. 
</p>

<pre class="explanation">
vbox->Add(midPan, 1, wxEXPAND | wxALL, 20);
</pre>

<p>
We have placed a 20 px border around a <code>midPan</code> panel. The 
<code>wxALL</code> flag applies the border size to all four sides. 
If we use <code>wxEXPAND</code> flag, the widget will use all the space 
that has been allotted to it.
</p>

<p>
Lastly, we can also define the alignment of our widgets. We do it 
with the following flags:
</p>

<ul>
	<li><code>wxALIGN_LEFT</code></li>
	<li><code>wxALIGN_RIGHT</code></li>
	<li><code>wxALIGN_TOP</code></li>
	<li><code>wxALIGN_BOTTOM</code></li>
	<li><code>wxALIGN_CENTER_VERTICAL</code></li>
	<li><code>wxALIGN_CENTER_HORIZONTAL</code></li>
	<li><code>wxALIGN_CENTER</code></li> 
</ul>

<p>
Say we wanted to place two buttons into the right bottom of 
the window. 
</p>

<div class="codehead">align.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class Align : public wxFrame
{
public:
    Align(const wxString&amp; title);

};
</pre>

<div class="codehead">align.cpp</div>
<pre class="code">
#include "align.h"

Align::Align(const wxString&amp; title)
       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(300, 200))
{

  wxPanel *panel = new wxPanel(this, -1);

  wxBoxSizer *vbox = new wxBoxSizer(wxVERTICAL);
  wxBoxSizer *hbox1 = new wxBoxSizer(wxHORIZONTAL);
  wxBoxSizer *hbox2 = new wxBoxSizer(wxHORIZONTAL);

  wxButton *ok = new wxButton(panel, -1, wxT("Ok"));
  wxButton *cancel = new wxButton(panel, -1, wxT("Cancel"));

  hbox1->Add(new wxPanel(panel, -1));
  vbox->Add(hbox1, 1, wxEXPAND);


  hbox2->Add(ok);
  hbox2->Add(cancel);

  vbox->Add(hbox2, 0, wxALIGN_RIGHT | wxRIGHT | wxBOTTOM, 10);
  panel->SetSizer(vbox);

  Centre();
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "align.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    Align *align = new Align(wxT("Align"));
    align->Show(true);

    return true;
}
</pre>

<p>
We create three sizers. One vertical sizer and two horizontal sizers. We 
put those two horizontal sizers into the vertical one. 
</p>

<pre class="explanation">
hbox1->Add(new wxPanel(panel, -1));
vbox->Add(hbox1, 1, wxEXPAND);
</pre>

<p>
We put a <code>wxPanel</code> into the first horizontal sizer. We set the 
proportion to <code>1</code> and set a <code>wxEXPAND</code> flag.
This way the sizer will occupy all the space except the <code>hbox2</code>.
</p>

<pre class="explanation">
vbox->Add(hbox2, 0, wxALIGN_RIGHT | wxRIGHT | wxBOTTOM, 10);
</pre>

<p>
We have placed the buttons into the <code>hbox2</code> sizer. The <code>hbox2</code> 
is right aligned and we also put some space to the bottom and to the right of the buttons.
</p>

<img src="align.png" tppabs="http://zetcode.com/img/gui/wxwidgets/align.png" alt="aligning buttons">
<div class="figure">
Figure: aligning buttons
</div>


<h2>Go To Class</h2>

<p>
In the following example we introduce several important ideas. 
</p>

<div class="codehead">gotoclass.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class GotoClass : public wxFrame
{
public:
  GotoClass(const wxString&amp; title);

};
</pre>

<div class="codehead">gotoclass.cpp</div>
<pre class="code">
#include "gotoclass.h"


GotoClass::GotoClass(const wxString&amp; title)
       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(450, 400))
{

  wxPanel *panel = new wxPanel(this, -1);

  wxBoxSizer *vbox = new wxBoxSizer(wxVERTICAL);

  wxBoxSizer *hbox1 = new wxBoxSizer(wxHORIZONTAL);
  wxStaticText *st1 =  new wxStaticText(panel, wxID_ANY, 
      wxT("Class Name"));

  hbox1->Add(st1, 0, wxRIGHT, 8);
  wxTextCtrl *tc = new wxTextCtrl(panel, wxID_ANY);
  hbox1->Add(tc, 1);
  vbox->Add(hbox1, 0, wxEXPAND | wxLEFT | wxRIGHT | wxTOP, 10);

  vbox->Add(-1, 10);

  wxBoxSizer *hbox2 = new wxBoxSizer(wxHORIZONTAL);
  wxStaticText *st2 = new wxStaticText(panel, wxID_ANY, 
      wxT("Matching Classes"));

  hbox2->Add(st2, 0);
  vbox->Add(hbox2, 0, wxLEFT | wxTOP, 10);

  vbox->Add(-1, 10);

  wxBoxSizer *hbox3 = new wxBoxSizer(wxHORIZONTAL);
  wxTextCtrl *tc2 = new wxTextCtrl(panel, wxID_ANY, wxT(""), 
      wxPoint(-1, -1), wxSize(-1, -1), wxTE_MULTILINE);

  hbox3->Add(tc2, 1, wxEXPAND);
  vbox->Add(hbox3, 1, wxLEFT | wxRIGHT | wxEXPAND, 10);

  vbox->Add(-1, 25);

  wxBoxSizer *hbox4 = new wxBoxSizer(wxHORIZONTAL);
  wxCheckBox *cb1 = new wxCheckBox(panel, wxID_ANY, 
      wxT("Case Sensitive"));

  hbox4->Add(cb1);
  wxCheckBox *cb2 = new wxCheckBox(panel, wxID_ANY, 
      wxT("Nested Classes"));

  hbox4->Add(cb2, 0, wxLEFT, 10);
  wxCheckBox *cb3 = new wxCheckBox(panel, wxID_ANY, 
      wxT("Non-Project Classes"));

  hbox4->Add(cb3, 0, wxLEFT, 10);
  vbox->Add(hbox4, 0, wxLEFT, 10);

  vbox->Add(-1, 25);

  wxBoxSizer *hbox5 = new wxBoxSizer(wxHORIZONTAL);
  wxButton *btn1 = new wxButton(panel, wxID_ANY, wxT("Ok"));
  hbox5->Add(btn1, 0);
  wxButton *btn2 = new wxButton(panel, wxID_ANY, wxT("Close"));
  hbox5->Add(btn2, 0, wxLEFT | wxBOTTOM , 5);
  vbox->Add(hbox5, 0, wxALIGN_RIGHT | wxRIGHT, 10);

  panel->SetSizer(vbox);

  Centre();
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "gotoclass.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{
 GotoClass *gotoclass = new GotoClass(wxT("GotoClass"));
 gotoclass->Show(true);

 return true;
}
</pre>

<p>
This is a complex example using <code>wxBoxSizer</code>. The layout is straitforward. 
We create one vertical sizer. We put then five horizontal sizers into it.
</p>

<pre class="explanation">
vbox->Add(hbox3, 1, wxLEFT | wxRIGHT | wxEXPAND, 10);

vbox->Add(-1, 25);
</pre>


<p>
We already know that we can control the distance among widgets by combining 
the flag parameter with the border parameter. But there is one real constraint. 
In the <code>Add()</code> method we can specify only one border for all given sides. In our 
example, we give 10 px to the right and to the left. But we cannot give 25 px to 
the bottom. What we can do is to give 10 px to the bottom, or 0 px. If we omit 
<code>wxBOTTOM</code>. So if we need different values, we can add some extra space. With 
the <code>Add()</code> method, we can insert widgets and space as well.
</p>

<pre class="explanation">
vbox->Add(hbox5, 0, wxALIGN_RIGHT | wxRIGHT, 10);
</pre>

<p>
We place the two buttons on the right side of the window. How do we do it? 
Three things are important to achieve this: the proportion, the align flag, 
and the <code>wxEXPAND</code> flag. The proportion must be zero. The buttons should not 
change their size, when we resize our window. We must not specify <code>wxEXPAND</code> flag. 
The buttons occopy only the area that has been alotted to it. And finally, we 
must specify the <code>wxALIGN_RIGHT</code> flag. The horizontal sizer spreads from the left 
side of the window to the right side. So if we specify <code>wxALIGN_RIGHT</code> flag, 
the buttons are placed to the right side. Exactly, as we wanted.
</p>


<img src="goto.png" tppabs="http://zetcode.com/img/gui/wxwidgets/goto.png" alt="GotoClass">
<div class="figure">
Figure: GotoClass
</div>


<h2>wxGridSizer</h2>

<p>
<code>wxGridSizer</code> lays out widgets in two dimensional table. Each cell within the 
table has the same size.
</p>

<pre class="definition">
wxGridSizer(int rows, int cols, int vgap, int hgap)
</pre>

<p>
In the constructor we specify the number of rows and columns in the table. 
And the vertical and horizontal space between our cells.
</p>

<p>
In our example we create a skeleton of a calculator. It is a perfect 
example for a <code>wxGridSizer</code>. 
</p>

<div class="codehead">gridsizer.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class GridSizer : public wxFrame
{
public:
  GridSizer(const wxString&amp; title);

  wxMenuBar *menubar;
  wxMenu *file;

  wxBoxSizer *sizer;
  wxGridSizer *gs;
  wxTextCtrl *display;

};
</pre>


<div class="codehead">gridsizer.cpp</div>
<pre class="code">
#include "gridsizer.h"

GridSizer::GridSizer(const wxString&amp; title)
       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(270, 220))
{
  menubar = new wxMenuBar;
  file = new wxMenu;

  SetMenuBar(menubar);

  sizer = new wxBoxSizer(wxVERTICAL);
 
  display = new wxTextCtrl(this, -1, wxT(""), wxPoint(-1, -1),
     wxSize(-1, -1), wxTE_RIGHT);

  sizer->Add(display, 0, wxEXPAND | wxTOP | wxBOTTOM, 4);
  gs = new wxGridSizer(4, 4, 3, 3);

  gs->Add(new wxButton(this, -1, wxT("Cls")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("Bck")), 0, wxEXPAND);
  gs->Add(new wxStaticText(this, -1, wxT("")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("Close")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("7")), 0, wxEXPAND); 
  gs->Add(new wxButton(this, -1, wxT("8")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("9")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("/")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("4")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("5")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("6")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("*")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("1")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("2")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("3")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("-")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("0")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT(".")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("=")), 0, wxEXPAND);
  gs->Add(new wxButton(this, -1, wxT("+")), 0, wxEXPAND);

  sizer->Add(gs, 1, wxEXPAND);
  SetSizer(sizer);
  SetMinSize(wxSize(270, 220));

  Centre();
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "gridsizer.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    GridSizer *gs = new GridSizer(wxT("GridSizer"));
    gs->Show(true);

    return true;
}
</pre>

<p>
In our example, we set a vertical sizer for a <code>wxFrame</code>. We put 
a static text and a grid sizer into the vertical sizer. 
</p>

<p>
Notice how we managed to put a space between the <code>Bck</code> and the 
<code>Close</code> buttons. We simply put an empty <code>wxStaticText</code> 
there. 
</p> 

<pre class="explanation">
gs->Add(new wxButton(this, -1, wxT("Cls")), 0, wxEXPAND);
</pre>

<p>
We call the <code>Add()</code> method multiple times. 
Widgets are placed inside the table in the order, they are added. 
The first row is filled first, then the second row etc. 
</p>

<img src="gridsizer.png" tppabs="http://zetcode.com/img/gui/wxwidgets/gridsizer.png" alt="GridSizer">
<div class="figure">
Figure: GridSizer
</div>


<h2>wxFlexGridSizer</h2>

<p>
This sizer is similar to <code>wxGridSizer</code>. It does  also lay out its 
widgets in a two dimensional table. It adds some flexibility to it. 
<code>wxGridSizer</code> cells are of the same size. All cells in <code>wxFlexGridSizer</code>
have the same height in a row. All cells have the same width in a column. 
But all rows and columns are not necessarily the same height or width. 
</p>

<pre class="definition">
wxFlexGridSizer(int rows, int cols, int vgap, int hgap)
</pre>

<p>
<code>rows</code> and <code>cols</code> specify the number of rows and columns in a sizer. 
<code>vgap</code> and <code>hgap</code> add some space between widgets in both directions. 
</p>

<p>
Many times developers have to develop dialogs for data input and modification. 
I find <code>wxFlexGridSizer</code> suitable for such a task. A 
developer can easily set up a dialog window with this sizer. 
It is also possible to accomplish this with <code>wxGridSizer</code>, but it 
would not look nice, because of the constraint that each cell has the same size. 
</p>

<div class="codehead">flexgridsizer.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class FlexGridSizer : public wxFrame
{
public:
  FlexGridSizer(const wxString&amp; title);

};
</pre>

<div class="codehead">flexgridsizer.cpp</div>
<pre class="code">
#include "flexgridsizer.h"

FlexGridSizer::FlexGridSizer(const wxString&amp; title)
       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(270, 220))
{ 
  wxPanel *panel = new wxPanel(this, -1);

  wxBoxSizer *hbox = new wxBoxSizer(wxHORIZONTAL);

  wxFlexGridSizer *fgs = new wxFlexGridSizer(3, 2, 9, 25);

  wxStaticText *thetitle = new wxStaticText(panel, -1, wxT("Title"));
  wxStaticText *author = new wxStaticText(panel, -1, wxT("Author"));
  wxStaticText *review = new wxStaticText(panel, -1, wxT("Review"));

  wxTextCtrl *tc1 = new wxTextCtrl(panel, -1);
  wxTextCtrl *tc2 = new wxTextCtrl(panel, -1);
  wxTextCtrl *tc3 = new wxTextCtrl(panel, -1, wxT(""),
      wxPoint(-1, -1), wxSize(-1, -1), wxTE_MULTILINE);

  fgs->Add(thetitle);
  fgs->Add(tc1, 1, wxEXPAND);
  fgs->Add(author);
  fgs->Add(tc2, 1, wxEXPAND);
  fgs->Add(review, 1, wxEXPAND);
  fgs->Add(tc3, 1, wxEXPAND);

  fgs->AddGrowableRow(2, 1);
  fgs->AddGrowableCol(1, 1);

  hbox->Add(fgs, 1, wxALL | wxEXPAND, 15);
  panel->SetSizer(hbox);
  Centre();
}
</pre>

<div class="codehead">main.h</div>
<pre class="code">
#include &lt;wx/wx.h&gt;

class MyApp : public wxApp
{
  public:
    virtual bool OnInit();
};
</pre>

<div class="codehead">main.cpp</div>
<pre class="code">
#include "main.h"
#include "flexgridsizer.h"

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{

    FlexGridSizer *fgs = new FlexGridSizer(wxT("FlexGridSizer"));
    fgs->Show(true);

    return true;
}
</pre>

<p>
In our example we create a simple dialog. It could be used to insert 
data into the database.
</p>

<pre class="explanation">
wxBoxSizer *hbox = new wxBoxSizer(wxHORIZONTAL);
...
hbox->Add(fgs, 1, wxALL | wxEXPAND, 15);
</pre>

<p>
We create a horizontal box sizer in order to put some space (15px) 
around the table of widgets.
</p>

<pre class="explanation">
fgs->Add(thetitle);
</pre>

<p>
We add widgets to the sizer exactly as with the gridsizer.
</p>

<pre class="explanation">
fgs->AddGrowableRow(2, 1);
fgs->AddGrowableCol(1, 1);
</pre>

<p>
We make the third row and the second column growable. This way we make the 
text controls grow, when the window is resized. The first two text controls 
will grow in horizontal direction, the third one will grow in both direction. 
We must not forget to make the widgets expandable (<code>wxEXPAND</code>) in 
order to make it really work.
</p>


<img src="flexgridsizer.jpg" tppabs="http://zetcode.com/img/gui/wxwidgets/flexgridsizer.jpg" alt="FlexGridSizer">
<div class="figure">
Figure: FlexGridSizer
</div>


<p>
This part of the wxWidgets tutorial was dedicated to layout management. 
</p>

<div class="hor">
<script async src="adsbygoogle.js" tppabs="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- horizontal -->
<ins class="adsbygoogle"
     style="display:inline-block;width:468px;height:60px"
     data-ad-client="ca-pub-9706709751191532"
     data-ad-slot="1734478269"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

<footer>

<div class="botNav center">
<span class="botNavItem"><a href="javascript:if(confirm('http://zetcode.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://zetcode.com/'" tppabs="http://zetcode.com/">Home</a></span> ‡ <span class="botNavItem"><a href=".-4.htm" tppabs="http://zetcode.com/gui/wxwidgets/layoutmanagement/..">Contents</a></span> ‡ 
<span class="botNavItem"><a href="#">Top of Page</a></span>
</div>

<div class="signature">
<a href="javascript:if(confirm('http://zetcode.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://zetcode.com/'" tppabs="http://zetcode.com/">ZetCode</a> last modified October 13, 2014  <span class="copyright">&copy; 2007 - 2014 Jan Bodnar</span>
</div>

</footer>

</div> <!-- content -->

</div> <!-- container -->

</body>
</html>
