第1章  Linux簡介
Linux是一個開放源代碼的操作系統，本章將主要介紹GNU的發展簡史、Linux的發展簡史，以及Linux環境下的編程語言。
1.1  GNU簡介
GNU是GNU's Not UNIX的遞歸縮寫。之所以取這個名字，主要是為了表明其不同於UNIX操作系統。GNU計劃最早是由Richard Stallman在1983年9月份公開發起的，其主要目標是開發一個非私有的、開放的操作系統。
GNU計劃中有一個著名的條款GPL（General Public License）。該條款的主要目的是保證GNU軟件可以被自由地傳播和使用，使用者不必向軟件開發者付費，且使用者可以自由地修改，並可以將修改後的軟件再發布出去。當然，發布後的軟件也必須遵守GPL      條款。
除了操作系統內核之外，一個完整的操作系統還應該有編輯器、瀏覽器、音樂播放器、編譯器、電子郵件等多種軟件。到了20世紀90年代的時候，GUN已經開發出了很多很成功的軟件，例如，功能強大的文字編輯器emacs、bash shell 程序、gcc編譯程序、gdb          調試程序等，就是缺少一個操作系統的內核，Linux就是在這樣的背景下產生的。GNU為Linux的產生提供了重要的條件，而Linux則大大豐富了GUN軟件。
1.2  Linux簡介
Linux是一個類UNIX的操作系統，是當今世界的主流操作系統之一。Linux是一個多用戶和多任務的操作系統，完全符合POSIX標準，具有很高的可靠性和穩定性，而且是免費和開源的。
1.2.1  Linux 發展史
1991年Linus Torvalds發布了Linux的第1個版本。Linux是一個多用戶和多任務的           操作系統。其是與當時非常著名的操作系統UNIX相兼容的操作系統，並且其遵守GPL條款，也就是說，Linux是一個開源的、免費的和自由的操作系統。而UNIX則需要付費才能使用，是商業化的軟件。
在當時，Linux算不上一個真正的操作系統，它只是一個操作系統的內核，且其第1個版本的功能很有限。儘管如此，它的發布還是引起了很大的轟動，很多非常優秀且擁護自由軟件的程序員開始關注Linux，並積極參與Linux的開發和完善，使Linux在發布後取得了快速的發展。
到了1994年年初的時候，眾人矚目的Linux1.0終於發布了。Linux 1.0已經是一個功能相對完備的操作系統，其內核十分緊湊和高效，能夠充分發揮硬件的性能，這是Linux發展史上一個十分重要的版本。隨著Linux的不斷完善和發展，越來越多的公司在Linux上開發商業軟件或把其他UNIX平台的軟件移植到Linux上來，現在Linux已經是世界上最重要的操作系統之一。
Linux操作系統在其誕生、發展和成長過程中有5個重要的支柱。它們分別是UNIX操作系統、MINIX操作系統、GNU計劃、POSIX標準和Internet，如圖1-1所示。

圖1-1  Linux發展的5個支柱
* UNIX操作系統：UNIX是一個功能強大的多用戶、多任務操作系統，最早由Ken Thompson和Dennis Ritchie於1969年在AT&T的貝爾實驗室開發。Linus在開發Linux過程中吸取了UNIX的許多特性，且Linux本身是與UNIX相兼容的。基本上可以說Linux就是UNIX的一個克隆體。
* MINIX操作系統：該操作系統也是UNIX的一種克隆系統，用C語言和匯編語言編寫。重要的是，Andrew S. Tanenbaum教授對外公布了其系統源代碼，這在全世界的大學中刮起了學習UNIX系統的潮流。
* GNU計劃：Linux操作系統的成長和發展是與GNU密切相關的。Linux只是操作系統的一個內核，如果沒有GNU軟件環境如前面提到的bash shell、gcc編譯程序等，則Linux不算是一個真正完整的操作系統。
* POSIX標準：POSIX是Portable Operating System Interface for Computing Systems的縮寫，是由IEEE和ISO/IEC為了提高應用程序的可移植性而開發的一簇標準。該標準在推動Linux 操作系統提高其應用軟件的可移植性上起了極其重要的作用。
* Internet：由於Internet的發展，使得全世界無數計算機駭客能夠了解並認識Linux。可以說，如果沒有Internet，Linux就不會發展得如此迅速。
1.2.2  Linux發行版
Linux是遵守GPL條款的軟件。也就是說，用戶可以從Internet或者其他途徑免費得到它的源代碼，並對它進行自由地使用和修改。但是對一般用戶來說，對這些源代碼進行編譯和調試是件很費時又複雜的事情。因此，便有一些公司和組織開發了基於GNU/Linux的Linux發行版。其中一些比較著名且較為流行的Linux發行版本如圖1-2所示。

圖1-2   Linux的重要發行版 
* Red Hat：Red Hat公司最早由Bob Young和Marc Ewing在1995年創建。Red Hat發行的GNU Linux 是全世界非常著名的Linux發行版，其擁有先進的技術支持，同時支持多種平台。
* Debian：Debian最早由Ian Murdock於1993年創建。Debian發行的Linux是迄今為止，最遵循GNU規範的Linux系統。該系統具有很高的可靠性，且其先進的管理工具包使得安裝和維護該系統都變得非常簡單。
* Ubuntu：Ubuntu由馬克·舍特爾沃斯創立的。其首個版本於2004年10月份發布。Ubuntu的首個版本以Debian為開發模板，目的是為了使個人計算機變得簡單易用。由於Ubuntu採用了Sudo工具，因此Ubuntu操作系統具有很高的安全性。
* SlckWare：是歷史最悠久的Linux發行版。該發行版非常安全可靠，但是由於使用時比較複雜和麻煩，因此，Slckware漸漸地被後人所遺忘。
* SUSE：SUSE Linux是德國著名的Linux發行版。
* Fedora：Fedora由開源社區與 Red Hat 工程師合作開發的，該發行版具有很好的技術支持。
* 紅旗：由中國科學院軟件所等幾家公司合作推出的中文發行版。
1.2.3  Linux內核版本
Linux中經常提到內核版本。簡單地說，Linux內核就是這個系統的最小化，是系統的核心。Linux內核由其創始人Linus帶領的小組維護。這個版本通常被認為是“官方版本”。內核版本號的格式為：主版本號.次版本號.修正號。例如Linux 2.6.10 ，表示該版本的主版本號是2，次版本號是6，為第10次修正。
Linux內核版本是按照一定的規則來編號的，其編號規則為：次版本號為偶數時，表示該版本為穩定版本，比較穩定可靠，用戶可以放心使用，當然該系統也可能存在潛在的漏洞。如果為奇數時，則表示該版本是不穩定的版本，該版本在前一穩定版本上增加了一些新的特性，但這些特性可能會造成系統的不可靠。
Linux內核自從其首個版本發布以來，已經歷了很多版本的變遷。以下是對一些重要版本的簡單介紹。
* Linux 1.0的官方版發行於1994年3月， Linux 1.0已經是一個功能相對完備的操作系統，其內核十分緊湊和高效，是Linux發展史上一個十分重要的版本。
* Linux 2.2於1999年1月發布，該版本進一步提高了對稱多處理器系統上的性能。
* Linux 2.4於2001年1月發布，該版本具有了很多桌面系統的特性，如支持USB和即插即用等。
* Linux 2.6於2003年12月發布。該版本不僅增加了系統的可擴展性和吞吐率，並且在嵌入式系統上取得了很大的進步，同時還在桌面系統的設計上有了進一步的突破。
1.2.4  Linux與UNIX的關係
Linux在其開發和設計過程中學習和借鑒了UNIX的許多特性，可以說Linux是從UNIX發展而來的，是一個類UNIX的操作系統。雖然Linux和UNIX有很多相似之處，但是也有一些區別，主要有以下兩點：
* UNIX系統大多是與硬件配套的，而Linux則可運行在多種硬件平台上。
* UNIX是商業軟件，用戶需要付費才能使用和獲得相關的服務。而Linux是自由軟件，是免費、公開源代碼的。
1.2.5  Linux在服務器方面的發展
Linux從誕生到現在已有近17年的歷史了，在這十多年中，Linux取得了巨大的發展，這主要取決於其卓越的性能、強大的功能、高可靠性以及跨平台性，更重要的是它是開源和免費的。Linux的發展方向主要有3個：服務器領域、嵌入式操作系統領域和桌面應用方面，如圖1-3所示。雖然Linux取得了輝煌的成績，但其主要應用在服務器領域。因此，除了不斷地改進自己的技術和提高服務之外，Linux還應該加強其在嵌入式操作系統方向和個人用戶領域的推廣。

圖1-3  Linux發展方向
“Linux就是服務器，或者換句話說，是服務器成就了Linux”。對於這樣的說法，雖然有些誇張，但足可以說明服務器對Linux的重要性。事實上，Linux最初就是從服務器領域開始迅速發展起來的，且對於Linux廠商來說，其主要收入都是來自服務器應用市場。可以說，服務器是Linux的基石。
2003年，Linux的應用在各個行業的分布比較平均，其中政府占20%。金融、電信、能源分別占15%、16%、20%。郵政占到18%，如表1-1所示。
表1-1  2003年Linux應用領域及所占比例
應 用 領 域
政  府
金  融
電  信
能  源
郵  政
所占比重
20%
15%
16%
20%
18%

而到了2006年，Linux在這些領域的比例有了明顯的提高，如表1-2所示。
表1-2  2006年Linux應用領域及所占比例
應 用 領 域
政  府
金  融
電  信
能  源
郵  政
所占比重
21%
17%
16%
20%
19%

據有關機構預測，2008年Linux在全球服務器中所占的比例將由2003年的15.6%增長到25.7%。由此可見，Linux在服務器領域還將會有一個更快的發展和更加美好的未來。
1.2.6  Linux在嵌入式系統方面的發展
嵌入式系統無疑是當前最熱門最有發展前途的IT應用領域之一。隨著家電產品不斷地深入普通百姓的生活，電子行業的發展也越來越快，特別是近年來家電智能化更是家電發展的一個重要趨勢。這就為嵌入式操作系統的發展提供了重要的契機。
由於Linux具有對各種設備的廣泛支持性，以及其是免費和開源的等優勢，嵌入式Linux系統取得了飛速發展。專用嵌入式實時操作系統與嵌入式Linux的比較如表1-3所示。
表1-3  嵌入式Linux操作系統與專用嵌入式實時操作系統比較
費用及性能
專用嵌入式實時操作系統
嵌入式Linux操作系統
購買費用
費用較大
免費
可移植性
比較難
比較容易
產品開發週期
較長
短
實時性能
較好
相對差些
穩定性
較好
相對差些

據權威分析報告表明，到2012年，全世界會有一億多台基於Linux系統的智能手機面市，約占全世界移動電話總量的88%。隨著摩托羅拉等手機製造業巨頭越來越多地開始使用Linux手機操作系統，相信Linux在智能手機操作系統領域裡將有更好的前景。
1.2.7  Linux在桌面系統方面的發展
雖然桌面系統曾經一直是Linux的弱項，但是令人可喜的是，Linux近幾年在桌面系統方面取得了很好的發展。尤其是隨著開源社區和開源文化的發展，使越來越多的人投身於開源事業，正是由於在文化傳播上的成功，使Linux在桌面系統方面也取得了很大的        成就。
1.3  Linux 環境下的其他編程語言
Linux支持目前幾乎所有主流的編程語言，除了支持C語言外，還支持C++、Java、Perl、Python、Ruby和PHP等多種語言。
1.3.1  C++
C++語言是在C語言的基礎上逐步發展和完善起來的一種應用非常廣泛的語言。因此，C++語言具有許多C語言的優良特性，如語言簡單靈活，容易學習和掌握；具有結構化的程序控制語句；執行效率高等。
C語言雖然有很多優點，但是隨著應用的不斷深入和廣泛，其本身所固有的一些弱點也顯現出來了。比如C語言代碼容易造成內存泄露、類型檢查機制較弱及代碼冗余處理不夠等。為了解決C語言存在的這些缺陷，一些專家開始對C語言進行改進和擴充，提出了面向對象的概念，將類的概念引入在C語言中，後來又引入了操作符重載、虛函數及多態等概念，再後來又引入了STL等，經過人們不斷地完善和發展，形成了現在的C++語言。
下面是兩個功能基本相同的程序，分別用C語言和C++語言實現，其主要目的是輸出時間並可以給時間變量賦值。C語言的實現方式如下：
程序清單1-1  這是一個用c語言實現的顯示時間的小程序
// 頭文件包含
#include <stdio.h>
//定義結構體 time_struct
struct time_struct
{
	int hour;
	int minute;
	int second;
};

int main( void )
{
	//聲明一個time_struct類型的變量 st_time1
	struct time_struct st_time1;
	//輸出變量st_time1的值
	printf("%d,%d,%d\n", st_time1.hour, st_time1.minute, 
	st_time1.second);

	//聲明一個time_struct類型的變量 st_time2
	struct time_struct st_time2;
	//初始化變量st_time2
	st_time2.hour = 12;
	st_time2.minute = 10;
	st_time2.second = 18;	

	//輸出變量st_time的值
	printf("%d,%d,%d\n", st_time2.hour, st_time2.minute, 
	st_time2.second);

	return 0;
}

程序運行結果為：
00:00:00
12:10:18

用C++實現的程序代碼如下：

程序清單1-2  這是一個用c++實現的顯示時間的小程序
//頭文件包含
#include <iostream.h>

//Time類的定義
class Time
{
public:
	// 默認構造函數
	Time();
	// 設置時間的函數
	void SetTime( int, int, int );
	//格式化輸出時間
	void DisplayTimeMilitary();

private:
	// 小時的有效範圍是0~23
	int hour;
	// 分的有效範圍是0~59
	int minute;
	// 秒的有效範圍是0~59
	int second;
};

// 構造函數
// 默認值均為0
Time::Time()
{
	hour = 0;
	minute = 0;
	second = 0;
}

//該函數用來重新設置時間
//設置時間前對參數進行合法性檢查，如果參數無效，則使用默認值
Time::SetTime( int h, int m, int s )
{
	this->hour = ( h >= 0 && h < 24 )? h:0;
	this->minute = ( m >= 0 && h < 60 )? m:0;
	this->second = ( s >= 0 && s < 60 )? s:0;
}

// 格式化輸出時間，其格式為hh:mm:ss
Time::DisplayTimeMilitary()
{
	cout<<( this->hour < 10 ? "0":"")<< this->hour<<":"
		<< (this->minute < 10 ? "0":"")<< this->minute
		<< (this->minute < 10 ? "0":"")<< this->second<< endl;
}

int main()
{
	Time t1;
	cout<<"t1 is:";
	t1.DisplayTimeMintary();

	Time t2;
	t2.SetTime( 12, 10, 18 );
	cout<<"t2 is:";
	t2.DisplayTimeMilitary();

	return 0;	
}
程序運行結果為：

t1 is 00:00:00
t2 is 12:10:18

通過以上兩個程序的比較可以發現，與C相比，C++重要的一個特點就支持面向對象編程。C++是一種通用的程序設計語言，特別是面向系統的程序設計。它具有以下幾個重要特點。
* 是一個更好的C語言；
* 支持數據抽象；
* 支持面向對象的程序設計；
* 支持泛型程序編程。
1.3.2  Java
Java包括Java程序設計語言和Java平台兩部分，它是由Sun公司於1995年5月推出的。在Internet發展早期，Internet上的內容大都是靜態的HTML文檔，然而，隨著Internet的發展，靜態文檔已經無法滿足人們的需要，很多人都希望能夠看到交互式的內容，Java就是在這樣的背景下產生的，並且在產生後取得了迅速的發展。
Java平台包括兩部分。一部分是Java虛擬機（Java Virtual Machine），另一部分是Java應用編程接口（Application Programming Interface，簡稱API）。Java虛擬機是Java語言的基礎，是其實現跨平台的關鍵。在硬件或操作系統平台上安裝了Java平台之後，Java應用程序就可以運行。現在Java平台已經嵌入了幾乎所有的操作系統，且Java程序只編譯一次，就可以在各種系統中運行，真正實現了“一次編寫，隨處運行”的功能。下面是用Java實現的類Time，通過此例可以了解Java程序的基本特徵。

程序清單1-3  Java的一個程序實例
// Time類定義 
public class Time
{
	//小時的有效範圍是0~23
	private int hour;

	// 分的有效範圍是0~59
	private int minute;

	// 秒的有效範圍是0~59
	private int second;

	//默認構造函數
	public Time()
	{
		// 默認初始值為0
		setTime( 0, 0, 0);
	}

	// 重新設置時間函數，並在設置前對參數進行合法性檢查
	public void setTime( int h, int m, int s )
	{
		hour = ( h >= 0 && h < 24 )? h:0;
		minute = ( m >= 0 && m < 60)? m:0;
		second = ( s >= 0 && s < 60 )? s:0;
	}

	//對時間進行格式化，將其轉化成字符串形式
	public String toString()
	{
		return String.format("%.2d:%2d:%2d", hour, minute, second);
	}
}

public class TimeTest
{
	public static void main( String args[ ] )
{
	// 聲明一個Time類型的變量time1
		Time time1 = new Time();
		system.out.print("time1 is:");
		system.out.println(time1.toString());

		// 聲明一個Time類型的變量time2
		Time time2 = new Time();
		time2.setTime(12, 10, 18);
		system.out.print("time2 is:");
		system.out.println(time2.toString());
	}
}

該程序運行結果為：

Time1 is 00:00:00
Time2 is 12:10:18

Java的主要特性如下所示。
* 語言簡單：一方面，Java語言的語法與C語言和C++語言很相似，因此，凡是學過C語言或者C++語言的程序員都能很容易地學習和使用Java。另一方面，Java捨棄了C++ 中容易引發錯誤的地方，如指針運算、操作符重載、多繼承等。同時，Java還提供了自動的內存回收處理，減少了因疏忽所致的內存泄露等問題。
* 面向對象：與C++語言相似，Java也是面向對象設計的語言。與C++語言不同的是，Java沒有使用多重繼承，而是用了接口的概念。
* 解釋型語言：Java程序在Java平台上被編譯為字節碼格式，然後可以在任何移植了解釋器的機器上運行。
* 高性能語言：雖然Java也是解釋型的語言，但是由於Java使用了JIT（Just-In-Time）編譯器技術，其運行速度得以大大提高。使用這種方式，只需一次解釋就可以了，因此大大提高了程序的執行效率。
* 通用性：Java的應用軟件是跨平台的，具有通用性。
* 可移植性：Java的源代碼是可移植的，在幾乎所有的操作系統中，無須修改便能運行。
* 安全性：Java提供了一系列的安全防範措施，包含禁止運行時堆棧溢出及未經授權禁止讀寫文件等。
* 體系結構中立：Java程序在Java平台上被編譯為體系結構中立的字節碼格式，然後可以在實現該Java平台的任何系統中運行。
* 支持多線程：Java語言可以很好地支持多線程，並提供多線程之間的同步機制。如果操作系統支持，Java中的線程甚至可以利用多個處理器同時運行。
1.3.3  Perl
Perl 是Practical Extraction and Report Language的縮寫。它是由Larry Wall設計的一種腳本開發語言，是處理文本、文件和進程的強大工具。Perl常用在處理文本、文件和字符串等地方。
下面是一個用Perl語言寫的查詞典的程序。其中，單詞及其含義保存在名為dict.txt的文本文件中。文件的格式如下：

abandon=>vt. 放棄;沉溺n. 放任
abandoned=>a. 被拋棄的;自棄的;自甘墮落的
abandonee=>n. 被遺棄者;被委付者
abandoner=>n. 遺棄者;委付者
abandonment=>n. 放棄;自暴自棄;放縱

程序代碼如下：

程序清單1-4  這是一個用Perl寫的查字典的小程序
#打開字典文件
open(File,"<dict.txt");
#初始化哈希變量
%hashDict=();

#循環讀入文件一行至文件末尾
while($Line=<File>)
{
	#去掉換行字符
	chomp($Line);
	#以”=>”作為分隔符將單詞與其翻譯進行分割
	($Word,$Trans)=split("=>",$Line);
	#構建哈希表
	$hashDict{$Word}=$Trans;	
}
#關閉文件
close(File);

	#在控制台上輸出提示
	#且當用戶輸入字符為q時退出程序
print "Please Input word you want to search（\"q\" to Exit）:\n";	
while($ForSearch=<stdin>)
{	
	#去掉用戶從控制台輸入的換行符
	chomp($ForSearch);
	if ( $ForSearch eq "q")
	{
		last;
	}
	#如果在哈希表中找到用戶輸入的字符串時，輸出單詞譯義
	if ( defined $hashDict{$ForSearch} )
	{
		print "$hashDict{$ForSearch}\n";
	}
	#如果沒找到，則輸出相應提示語
	else
	{
		print "$For Search is not in the dict!\n";
	}
print "Please Input word you want to search（\"q\" to Exit）:\n";
}

程序運行結果如下：

Input word you want to search（\"q\" to Exit）abandoned
被拋棄的;自棄的;自甘墮落的
Input word you want to search（\"q\" to Exit）abandonment
放棄;自暴自棄;放縱
Input word you want to search（\"q\" to Exit）q
(退出程序)

由此程序可以看到，相對於C和C++等其他語言，Perl在處理文本文件時較為簡單且具有很強的處理能力。
1.3.4  Python
Python是一種功能強大的腳本編程語言，也是一種面向對象的解釋性的計算機程序設計語言，它提供了豐富、強大的類庫，為使用者提供了很大的方便，而且它還是免費的。Python簡單實用，其語言沒有很複雜的結構和概念，學習起來很容易。同時，像其他腳本語言一樣，Python程序無須編譯，寫好了就可以直接運行。
雖然Python具有很多優點，但是也難免有一些缺點。比如Python語言過於重視程序結構，以及其使用縮進來區分語句關係的方式往往會導致一些錯誤的發生。初學者常常會因為Tab和空格的混用而導致錯誤。下面是一個簡單的Python 程序。
程序清單1-5  python 實例小程序
>>#
... a, b = 0, 1
>>> while b < 50:
...   print b
...   a, b = b, a+b
... 

程序運行結果為：

1
1
2
3
5
8
13
21
34
1.3.5  Ruby
Ruby是一種由日本人松本行弘開發的腳本語言。之所以取名為Ruby，是受到了Perl的啟發。Perl的發音與6月的誕生石pearl相同，所以，松本行弘決定用7月的誕生石Ruby來為他的語言命名。作為一種腳本語言，Ruby具有以下優點：
* 解釋器。Ruby是解釋型語言，其程序無需編譯即可執行。
* 變量無類型。使用前不需要進行變量聲明，所有變量均無須聲明即可立即使用。此外Ruby的變量有一定的規則，如以$開頭的一定是全局變量，以@開頭的都是實例變量，而以@@開頭的是類變量。
* 語法簡單。語法比較簡單，學習起來較為容易。
* 不需要內存管理。具有垃圾回收功能，能自動回收不再使用的對象。這就減少了因疏忽所致的內存泄露。
* 面向對象設計。具有面向對象語言所具有的類、繼承和方法等基本功能。
* 功能強大的字符串操作。具有功能強大的字符串操作和正則表達式檢索功能。
* 可以直接訪問OS。Ruby可以使用操作系統絕大部分的系統調用，因此可以直接訪問操作系統。
但Ruby也有下列缺點：
* Ruby是解釋型語言，所以速度相對較慢些。
* 由於變量無類型，靜態檢查比就較少，所以可能會導致一些錯誤。
1.3.6  PHP
PHP（PHP：Hypertext Preprocessor，超文本預處理器的遞歸命名）是一種被廣泛應           用的腳本語言，它可嵌入到HTML中，尤其適合Web開發。PHP是由Rasmus Lerdorf在1994年創建的。在1995年Lerdorf 發布了PHP的第1個版本PHP1.0，並於同年發布了PHP2.0。
1997年，PHP3發布。PHP3可以跟 Apache服務器緊密結合，它幾乎支持所有主流與非主流數據庫，並且具有很高的執行效率。2000年，PHP4發布。PHP4是跨平台的，實現了統一PHP程序在不同的系統平台上運行。2003年，PHP5公布。PHP5的重要特點是具有成熟的面向對象體系。下面是一個用PHP5編寫的演示程序：

程序清單1-6  PHP程序實例
<?php
class foo
{
//類foo包含一個成員變量x
var $x;

//默認構造函數
f_construct()
{
	$this->x = "Construction is called";
}
// 帶參數的構造函數
f_construct($x)
{
	$this->x = $x;
}
// 析構函數
f_destruct()
{
	printf("Destruction is called!");
}
//設置成員變量x的值
function setX($x) 
{ 
	$this->x = $x; 
} 
//訪問成員變量的x值
function getX() 
{ 
	return $this->x; 
} 
// 輸出變量的值
function display()
{
	printf($this->x);
}
}
//聲明一個foo類型的變量 a
$a = new foo(); 
$a->display();
//對變量a重新賦值
$a->setX("Hello World!");
$a->display();

//聲明一個foo類型的變量 a
$b = new foo("Welcome to php");
$b->display();
?>

程序結果為：

Destruction is called!
	 Hello World!;
	 Welcome to php;
	 Destruction is called!
  Destruction is called!

通過這個程序，可以看到，PHP已經能很好地支持面向對象編程。
PHP具有以下許多優點。
* 語法比較簡單。
* 支持面向對象編程。
* 跨平台。
* 性能優越。
* 免費並且開放源代碼。
當然，PHP也存在以下一些缺點。
* 缺乏對名字空間的支持，可能會遇到名字衝突的問題。
* 缺乏對Unicode的支持。
* 代碼重用率不是很高。

??

??

??

??

Linux C程序設計大全

第1章  Linux簡介

·16·


·15·






